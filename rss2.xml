<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>FJBQ</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>坚定 坚持 坚强</description>
    <pubDate>Sat, 23 Dec 2023 10:12:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>《Programming in Lua》读书笔记</title>
      <link>http://example.com/2023/12/17/Programming%20in%20Lua%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2023/12/17/Programming%20in%20Lua%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sun, 17 Dec 2023 02:39:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;这篇文章记录一下阅读 Programming in Lua 时的一些注意点，以及一些重要的模块。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ps：页数指的是书中的页数，不是 PDF 目录的页数；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/0</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>这篇文章记录一下阅读 Programming in Lua 时的一些注意点，以及一些重要的模块。</strong></p><p>ps：页数指的是书中的页数，不是 PDF 目录的页数；</p><p><a href="https://github.com/0kk470/pil4">GitHub - 0kk470&#x2F;pil4: Lua程序设计第四版习题答案 (Programming in Lua 4th Edition Exercise Solutions)</a></p><h1 id="第-3-章-表达式"><a href="#第-3-章-表达式" class="headerlink" title="第 3 章 表达式"></a>第 3 章 表达式</h1><h2 id="P14"><a href="#P14" class="headerlink" title="P14"></a>P14</h2><p>注意一下：</p><p><strong>and 和 or 的运算结果不是 true 和 false，而是和它的两个操作数相关。</strong></p><h2 id="P16"><a href="#P16" class="headerlink" title="P16"></a>P16</h2><p><strong>首先我们看一下下面这个例子</strong>： </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">polyline = </span><br><span class="line">&#123;</span><br><span class="line">    color=<span class="string">&quot;blue&quot;</span>, thickness=<span class="number">2</span>, npoints=<span class="number">4</span>,</span><br><span class="line">    &#123;x=<span class="number">0</span>, y=<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">-10</span>, y=<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">-10</span>, y=<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">0</span>, y=<span class="number">1</span>&#125;,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(#polyline)    <span class="comment">-- 输出：8</span></span><br></pre></td></tr></table></figure><p>可以发现：</p><p>table 中的域（color，thickness，npoints）不会被算入table大小中，所以如果我们直接for i&#x3D;1,#polyline 去遍历table，无法输出所有的内容。</p><p>但是我们可以通过泛型for去遍历，for name in pair(polyline ) do … end</p><p><a href="https://blog.csdn.net/qq_40217173/article/details/103482445">Lua 打印table表内容_lua打印表-CSDN博客</a></p><p><strong>注意语法：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line">polyline = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;+&quot;</span> = <span class="string">&quot;-&quot;</span>,      <span class="comment">-- 语法错误</span></span><br><span class="line">    [<span class="string">&quot;+&quot;</span>] = <span class="string">&quot;-&quot;</span>,    <span class="comment">-- 这才是对的，直接使用字符串要用[]包一下</span></span><br><span class="line">    s = <span class="string">&quot;+&quot;</span>,        <span class="comment">-- 间接使用则不用包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第-4-章-基本语法"><a href="#第-4-章-基本语法" class="headerlink" title="第 4 章 基本语法"></a>第 4 章 基本语法</h1><h2 id="P21"><a href="#P21" class="headerlink" title="P21"></a>P21</h2><h2 id="p22"><a href="#p22" class="headerlink" title="p22"></a>p22</h2><p>（这里面讲到了，尽量不要改变控制变量的值…）</p><h1 id="第-5-章-函数"><a href="#第-5-章-函数" class="headerlink" title="第 5 章 函数"></a>第 5 章 函数</h1><h2 id="p27"><a href="#p27" class="headerlink" title="p27"></a>p27</h2><p><strong>unpack()</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">polyline = </span><br><span class="line">&#123;</span><br><span class="line">    color=<span class="string">&quot;blue&quot;</span>, thickness=<span class="number">2</span>, npoints=<span class="number">4</span>,</span><br><span class="line">    &#123;x=<span class="number">0</span>, y=<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">-10</span>, y=<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">-10</span>, y=<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;x=<span class="number">0</span>, y=<span class="number">1</span>&#125;,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">unpack</span>(polyline))    </span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">table: 00479BF0 </span></span><br><span class="line"><span class="comment">table: 00479BA0 </span></span><br><span class="line"><span class="comment">table: 00479CE0 </span></span><br><span class="line"><span class="comment">table: 00479D08 </span></span><br><span class="line"><span class="comment">5       </span></span><br><span class="line"><span class="comment">6       </span></span><br><span class="line"><span class="comment">a       </span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">可以看到域还是没输出。</span></span><br><span class="line"><span class="comment">]]</span><span class="comment">-- </span></span><br></pre></td></tr></table></figure><p><strong>可变参数</strong></p><h1 id="第-6-章-再论函数"><a href="#第-6-章-再论函数" class="headerlink" title="第 6 章 再论函数"></a>第 6 章 再论函数</h1><h2 id="p32"><a href="#p32" class="headerlink" title="p32"></a>p32</h2><p><strong>闭包（这个很重要呀）</strong></p><ul><li>可以用于持久化数据，保存一些状态</li><li>可以用于重写函数，保证安全性</li></ul><h2 id="p37"><a href="#p37" class="headerlink" title="p37"></a>p37</h2><p><strong>尾调用：</strong></p><p>因为尾调用不需要额外的栈空间，所以可以用来优化；</p><p>注意分辨哪些是真正的尾调用</p><h1 id="第-7-章-迭代器与泛型-for"><a href="#第-7-章-迭代器与泛型-for" class="headerlink" title="第 7 章 迭代器与泛型 for"></a>第 7 章 迭代器与泛型 for</h1><h2 id="p40"><a href="#p40" class="headerlink" title="p40"></a>p40</h2><p><img src="/images/Programming-in-Lua-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/1.jpg"></p><p><strong>图片中的程序怎么理解</strong>？</p><p>对于上面的解释，应该是第一次调用的时候，返回的是函数（还未调用），此时i&#x3D;0（闭包 iter），然后第二次调用闭包 iter() 的时候i才会自增</p><p><img src="/images/Programming-in-Lua-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2.png"></p><p>同理，在这里的for in ipairs 中，ipairs（）表达式是先计算好的，返回了三个值（闭包）；然后for语句通过in不断去调用这个闭包，达到遍历的效果，而且是无状态的（不用先创建闭包出来）</p><p>第7章需要细品，其实是闭包的应用之迭代器</p><h1 id="第-8-章-编译·运行·调试"><a href="#第-8-章-编译·运行·调试" class="headerlink" title="第 8 章 编译·运行·调试"></a>第 8 章 编译·运行·调试</h1><p>pcall，xpcall</p><h1 id="第-9-章-协同程序"><a href="#第-9-章-协同程序" class="headerlink" title="第 9 章 协同程序"></a>第 9 章 协同程序</h1><p>重要的</p><h1 id="第-12-章-数据文件与持久化"><a href="#第-12-章-数据文件与持久化" class="headerlink" title="第 12 章 数据文件与持久化"></a>第 12 章 数据文件与持久化</h1><p><a href="https://blog.csdn.net/hello_crayon/article/details/50667927#:~:text=%q">Lua string.format用法-CSDN博客</a></p><h2 id="p89"><a href="#p89" class="headerlink" title="p89"></a>p89</h2><p>12.1.2 保存带有循环的table，这一块比较复杂一点；</p><p>其实就是 <strong>记忆化搜索</strong> 的过程。</p><h1 id="第-13-章-Metatables-and-Metamethods"><a href="#第-13-章-Metatables-and-Metamethods" class="headerlink" title="第 13 章 Metatables and Metamethods"></a>第 13 章 Metatables and Metamethods</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Metatables 允许我们改变 table 的行为，例如，使用 Metatables 我们可以定义 Lua 如</span><br><span class="line">何计算两个 table 的相加操作 a+b。当 Lua 试图对两个表进行相加时，他会检查两个表是</span><br><span class="line">否有一个表有 Metatable，并且检查 Metatable 是否有__add 域。如果找到则调用这个__add</span><br><span class="line">函数（所谓的 Metamethod）去计算结果。</span><br></pre></td></tr></table></figure><h2 id="p92"><a href="#p92" class="headerlink" title="p92"></a>p92</h2><p>下面测试一下 <strong>算术运算的Metatables</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Set1 = &#123;&#125;</span><br><span class="line">Set1.mt = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set1.new</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> set = &#123;&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(set, Set1.mt)</span><br><span class="line">    <span class="keyword">for</span> _, l <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span> set[l] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set1.union</span> <span class="params">(a,b)</span></span> </span><br><span class="line">    <span class="keyword">local</span> res = Set1.new&#123;&#125; </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span> res[k] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(b) <span class="keyword">do</span> res[k] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Set1.mt.<span class="built_in">__add</span> = Set1.union</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------</span></span><br><span class="line"></span><br><span class="line">Set2 = &#123;&#125;</span><br><span class="line">Set2.mt = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set2.new</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> set = &#123;&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(set, Set2.mt)</span><br><span class="line">    <span class="keyword">for</span> _, l <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span> set[l] = <span class="literal">true</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> set</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set2.union</span> <span class="params">(a,b)</span></span> </span><br><span class="line">    <span class="keyword">local</span> res = Set2.new&#123;&#125; </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">     res[k] = b[k] </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Set2.mt.<span class="built_in">__add</span> = Set2.union</span><br><span class="line"></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_tostring</span> <span class="params">(set)</span></span> </span><br><span class="line"><span class="keyword">local</span> s = <span class="string">&quot;&#123;&quot;</span></span><br><span class="line"><span class="keyword">local</span> sep = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">pairs</span>(set) <span class="keyword">do</span></span><br><span class="line"> s = s .. sep .. e </span><br><span class="line"> sep = <span class="string">&quot;, &quot;</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">return</span> s .. <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_print</span> <span class="params">(s)</span></span> </span><br><span class="line"> <span class="built_in">print</span>(fun_tostring(s)) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试两个都是同一种集合</span></span><br><span class="line">s1 = Set1.new&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = Set1.new&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">s3 = s1 + s2</span><br><span class="line">s4 = s2 + s1</span><br><span class="line"></span><br><span class="line">fun_print(s3)       <span class="comment">-- &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">fun_print(s4)       <span class="comment">-- &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试两个是不同种集合</span></span><br><span class="line">s1 = Set1.new&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = Set2.new&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">s3 = s1 + s2</span><br><span class="line">s4 = s2 + s1</span><br><span class="line"></span><br><span class="line">fun_print(s3)       <span class="comment">-- &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">fun_print(s4)       <span class="comment">-- &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>首先 Metatable 可以理解为一个专门重载表的运算符的集合；</p><p>所有关于两个表的操作，都要定义在这个 Metatable 里面，定义的具体运算函数为 Metamethods；</p><p>规则：（针对 同一种 &#x2F; 非同一种 表都适用）</p><ul><li>第一个 table 的 Metatable  有定义对应的 Metamethods，则用第一个表的；</li><li>如果第一个表没定义，看第二个表是否有定义，有就用第二个的；</li><li>都没定义，则会报错</li></ul><p>关于 <strong>关系运算的Metamethods</strong>：</p><p>两个 table 的 Metamethods 必须相同才能进行运算；</p><h2 id="p97"><a href="#p97" class="headerlink" title="p97"></a>p97</h2><p><strong>表相关的 Metamethods</strong></p><p>这一部分很妙啊！值得反复阅读；</p><p>主要是搞清楚：</p><ul><li><strong>__index metamethod</strong><ul><li>可以理解为<strong>访问</strong>，当访问表中不存在的域时，会去找 <strong>__index metamethod</strong></li></ul></li><li><strong>__newindex metamethod</strong><ul><li>可以理解为<strong>更新</strong>，当对表中不存在的域进行赋值时，会去找 <strong>__newindex metamethod</strong></li></ul></li></ul><h1 id="第-14-章-环境"><a href="#第-14-章-环境" class="headerlink" title="第 14 章 环境"></a>第 14 章 环境</h1><p><strong>这一章我们将讨论一些如何操纵环境的有用的技术。</strong></p><h1 id="第-15-章-Packages"><a href="#第-15-章-Packages" class="headerlink" title="第 15 章 Packages"></a>第 15 章 Packages</h1><h2 id="p111"><a href="#p111" class="headerlink" title="p111"></a>p111</h2><p>私有成员</p><ul><li><p>将 Packages 中的函数声明为 local 的（私有）</p></li><li><p>改进：所有的函数都声明为local的，在 Packages 的最后定义一下公有函数就行。</p></li></ul><p>这一块好多技巧…</p><p>学了后面忘了前面… 复习一下；</p><p><a href="https://blog.csdn.net/gulan0/article/details/88696032">Lua中setfenv()_lua setfenv-CSDN博客</a></p><h1 id="第-16-章-面向对象程序设计"><a href="#第-16-章-面向对象程序设计" class="headerlink" title="第 16 章 面向对象程序设计"></a>第 16 章 面向对象程序设计</h1><h2 id="p119"><a href="#p119" class="headerlink" title="p119"></a>p119</h2><p>这里讲到了 self 的调用；</p><h2 id="p119-121（16-1-类）"><a href="#p119-121（16-1-类）" class="headerlink" title="p119 - 121（16.1 类）"></a>p119 - 121（16.1 类）</h2><p>lua 没有类的概念，更像是一种原型模式；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在这些语言中，对象没有类。相反，每个对象都有一个 prototype</span><br><span class="line">（原型），当调用不属于对象的某些操作时，会最先会到 prototype 中查找这些操作。在</span><br><span class="line">这类语言中实现类（class）的机制，我们创建一个对象，作为其它对象的原型即可（原</span><br><span class="line">型对象为类，其它对象为类的 instance）。类与 prototype 的工作机制相同，都是定义了特</span><br><span class="line">定对象的行为。</span><br></pre></td></tr></table></figure><p>这里讲到了用 metatable 的操作去做一种 类和对象的关系；</p><p>但是实际上感觉讲的不准确… 实际上就是没有类… 就都是对象；</p><p>比如：setmetatable(a, {__index &#x3D; b}) </p><p>我个人的理解是 b是父对象，a是子对象；</p><p>当a找不到属性&#x2F;方法的时候会去找b的；</p><p>这一小节后面的例子有点绕… 需要细品；</p><h2 id="p121-122（16-2-继承）"><a href="#p121-122（16-2-继承）" class="headerlink" title="p121 - 122（16.2 继承）"></a>p121 - 122（16.2 继承）</h2><p>这里讲一下为啥能够形成 （祖父-父-子） 的继承链关系：</p><ul><li>祖父：Account</li><li>父：SpecialAccount</li><li>子：s</li></ul><p>其实我们把冒号写成点的形式就一目了然了（这里只讲new）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">主要看下面这一段：</span><br><span class="line">Account = &#123;balance = <span class="number">0</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account:new</span> <span class="params">(o)</span></span> </span><br><span class="line">o = o <span class="keyword">or</span> &#123;&#125; </span><br><span class="line"><span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>) </span><br><span class="line"><span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span> </span><br><span class="line"><span class="keyword">return</span> o </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">这里我们把它用dot的形式写出来（也就是上一小节最后的样子）：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Account.new</span> <span class="params">(Account, o)</span></span> </span><br><span class="line">o = o <span class="keyword">or</span> &#123;&#125; </span><br><span class="line"><span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>) </span><br><span class="line"><span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span> </span><br><span class="line"><span class="keyword">return</span> o </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">这里我 <span class="built_in">self</span> 先不变，但是要知道，函数中的 <span class="built_in">self</span> 就是函数的第一个参数！</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 下面开始继承关系</span></span><br><span class="line"></span><br><span class="line">首先第一次继承：</span><br><span class="line">SpecialAccount = Account:new()</span><br><span class="line">也就是调用了一次：SpecialAccount = Account.new (Account, <span class="literal">nil</span>) </span><br><span class="line">可以看到此时new函数中的<span class="built_in">self</span>是Account；</span><br><span class="line">于此同时 o=&#123;&#125;，然后 o 的 metatable 为<span class="built_in">self</span>（也就是Account），然后o返回出去给SpecialAccount（o &lt;=&gt; SpecialAccount）;</span><br><span class="line"></span><br><span class="line">然后第二次继承：（关键的来了）</span><br><span class="line">s = SpecialAccount:new&#123;limit=<span class="number">1000.00</span>&#125;</span><br><span class="line">这里也就是调用了一次：s = SpecialAccount.new(SpecialAccount,&#123;limit=<span class="number">1000.00</span>&#125;)；</span><br><span class="line">但是但是，SpecialAccount是没有new函数的，所以去SpecialAccount的metatable里面找，找到Account的函数并调用：Account.new(SpecialAccount,&#123;limit=<span class="number">1000.00</span>&#125;)；</span><br><span class="line">可以看到，这里的<span class="built_in">self</span>是SpecialAccount，而不是Account！！！</span><br><span class="line">此时我们看看new函数里面做了啥：它把 &#123;limit=<span class="number">1000.00</span>&#125; 的 metatable 设置为 <span class="built_in">self</span>（也就是SpecialAccount）！然后返回给s；</span><br><span class="line">也就是说 s 的 metatable 其实是 SpecialAccount，而 SpecialAccount 的 metatable 是 Account；</span><br><span class="line">进而形成了继承链！</span><br><span class="line"></span><br><span class="line">一开始看的时候也很懵...</span><br></pre></td></tr></table></figure><h1 id="第-17-章-Weak-表"><a href="#第-17-章-Weak-表" class="headerlink" title="第 17 章 Weak 表"></a>第 17 章 Weak 表</h1><ul><li><p>只有对象才会被回收</p></li><li><p>可以通过weak表来进行垃圾回</p></li><li><p>通过 metatable 的 __mode 域来表示 weak 表</p></li><li><p>优化记忆函数：设置 记忆表 的 metatable 为 weak 表（value 为 weak，这样能节省空间）</p></li><li><p>最后的两个例子好繁琐…</p></li><li><p>大致的思想就是通过 weak 表来优化默认值的存储，允许被回收</p></li></ul><h1 id="第-18-章-数学库"><a href="#第-18-章-数学库" class="headerlink" title="第 18 章 数学库"></a>第 18 章 数学库</h1><ul><li><strong>y &#x3D; math.rad(x)</strong><ul><li>将 角度 x 转化为 弧度 y</li></ul></li><li><strong>x &#x3D; math.deg(y)</strong><ul><li>将 弧度 y 转换为 角度 x</li></ul></li><li><strong>math.random</strong><ul><li>生成随机数（可以带 0&#x2F;1&#x2F;2 个参数）</li></ul></li><li><strong>math.randomseed(os.time())</strong><ul><li>设置随机种子（通过系统时间）</li></ul></li></ul><h1 id="第-19-章-table-库"><a href="#第-19-章-table-库" class="headerlink" title="第 19 章 table 库"></a>第 19 章 table 库</h1><h2 id="p136（数组大小）"><a href="#p136（数组大小）" class="headerlink" title="p136（数组大小）"></a>p136（数组大小）</h2><ul><li><strong>table.getn()</strong> 在 lua 5.0 以上已经被废弃了</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span>.<span class="built_in">getn</span>() 等价于 #t</span><br><span class="line"></span><br><span class="line">t = &#123;n = <span class="number">10</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)<span class="comment">-- 输出：0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 下面做一个有意思的实验</span></span><br><span class="line"><span class="keyword">local</span> t = &#123;<span class="literal">nil</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：0</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="number">1</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：1</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="literal">nil</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：2</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="literal">nil</span>,<span class="literal">nil</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：3</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="number">1</span>,<span class="literal">nil</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：3</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="number">1</span>,<span class="literal">nil</span>,<span class="number">2</span>,<span class="literal">nil</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：1</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="number">1</span>,<span class="literal">nil</span>,<span class="number">2</span>,<span class="literal">nil</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：5</span></span><br><span class="line"></span><br><span class="line">t = &#123;<span class="number">1</span>,<span class="literal">nil</span>,<span class="number">2</span>,<span class="literal">nil</span>,<span class="number">3</span>,<span class="literal">nil</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(#t)       <span class="comment">-- 输出：3</span></span><br></pre></td></tr></table></figure><p>是不是懵逼了… 我也没搞懂… 具体看这：</p><p><a href="https://www.runoob.com/w3cnote/lua-table-length.html">lua 中求 table 长度 | 菜鸟教程 (runoob.com)</a></p><ul><li>另外 <strong>table.setn()</strong> 好像也没了… 直接没有这个方法了</li></ul><h2 id="p137-插入删除"><a href="#p137-插入删除" class="headerlink" title="p137 插入删除"></a>p137 插入删除</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t,<span class="number">4</span>);      <span class="comment">-- 默认在最后插入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">unpack</span>(t))        <span class="comment">-- 输出：1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t,<span class="number">2</span>,<span class="number">5</span>);    <span class="comment">-- 在位置2插入值为5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">unpack</span>(t))        <span class="comment">-- 输出：1 5 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> v = <span class="built_in">table</span>.<span class="built_in">remove</span>(t)         <span class="comment">-- 默认在最后删除（并返回）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">unpack</span>(t))        <span class="comment">-- 输出：1 5 2 3</span></span><br><span class="line"></span><br><span class="line">v = <span class="built_in">table</span>.<span class="built_in">remove</span>(t,<span class="number">1</span>)       <span class="comment">-- 删除位置为1的值（并返回）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">unpack</span>(t))        <span class="comment">-- 输出：5 2 3</span></span><br></pre></td></tr></table></figure><ul><li>排序讲的很清楚了，注意到最后一个例子又用到了闭包（迭代器）</li></ul><h1 id="第-20-章-String-库"><a href="#第-20-章-String-库" class="headerlink" title="第 20 章 String 库"></a>第 20 章 String 库</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><strong>string.len(s)</strong><ul><li>返回字符串长度</li></ul></li><li><strong>string.rep(s,n)</strong><ul><li>返回重复了n次s的字符串</li></ul></li><li><strong>string.lower(s)</strong><ul><li>将 s 中的大写字母转换成小写</li></ul></li><li><strong>string.upper(s)</strong><ul><li>将小写转换成大写</li></ul></li><li><strong>string.sub(s,i,j)</strong><ul><li>截取字符串，可以是负数，表示倒着数的第几个；</li><li>lua 中的字符串不会改变，所有操作之后是返回一个新的字符串；</li></ul></li><li><strong>string.char(97，98，99)</strong><ul><li>将数字num转化为字符</li></ul></li><li><strong>string.byte(s,i)</strong><ul><li>将字符串s的第i个字符转化为数字，i默认为1，i可以为负数</li></ul></li><li><strong>string.format()</strong><ul><li>格式化字符串，和printf一样…</li><li>%d 十进制；%x 十六进制；%o 八进制</li></ul></li><li><strong>st，en &#x3D; string.find(s, p, i)</strong><ul><li>字符串查找（基于模式匹配，不是posix规范的正则表达式）</li><li>从 s 的 i 位置开始，在 s 中找 p ，找到返回 开始st和结束下标en，找不到返回 nil；</li></ul></li><li><strong>s，count &#x3D; string.gsub(s, p1, p2，times)</strong><ul><li>全局字符串替换（基于模式匹配，不是posix规范的正则表达式）</li><li>从 s 中 找 p1，并替换成 p2（全部替换）</li><li>times 是限制要替换几次；</li><li>count 是一共替换了几次；</li></ul></li><li><strong>string.gfind()</strong><ul><li>全局字符串查找（基于模式匹配，不是posix规范的正则表达式）</li></ul></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">下面的表列出了 Lua 支持的所有字符类：</span><br><span class="line"></span><br><span class="line">. 任意字符</span><br><span class="line">%a 字母</span><br><span class="line">%c 控制字符</span><br><span class="line">%d 数字</span><br><span class="line">%l 小写字母</span><br><span class="line">%p 标点字符</span><br><span class="line">%s 空白符</span><br><span class="line">%u 大写字母</span><br><span class="line">%w 字母和数字</span><br><span class="line">%x 十六进制数字</span><br><span class="line">%z 代表 0 的字符</span><br><span class="line"></span><br><span class="line">上面字符类的大写形式表示小写所代表的集合的补集。例如，&#x27;%A&#x27;非字母的字符;</span><br><span class="line"></span><br><span class="line">print(string.gsub(&quot;hello, up-down!&quot;, &quot;%A&quot;, &quot;.&quot;)) </span><br><span class="line">--&gt; hello..up.down. 4</span><br><span class="line">4 是替换的次数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Lua 中的特殊字符如下：</span><br><span class="line">( ) . % + - * ? [ ^ $</span><br><span class="line"></span><br><span class="line">特殊字符用 % 转义</span><br><span class="line"></span><br><span class="line">其他的用 \ 转义</span><br></pre></td></tr></table></figure><ul><li><p>其他的好复杂（主要是我不会正则表达式…我是fw）</p></li><li><p>捕获、转换的技巧 也看不懂…</p></li></ul><h1 id="第-21-章-IO库"><a href="#第-21-章-IO库" class="headerlink" title="第 21 章 IO库"></a>第 21 章 IO库</h1><h2 id="p157-简单IO模式"><a href="#p157-简单IO模式" class="headerlink" title="p157 简单IO模式"></a>p157 简单IO模式</h2><ul><li><strong>io.input(filename)</strong><ul><li>打开给定的文件，并将其设置为当前输入文件；</li></ul></li><li><strong>io.output()</strong><ul><li>设置当前的输出文件；</li></ul></li><li><strong>io.read()</strong><ul><li>从当前输入文件读取字符串</li><li>“*all”：读取整个文件</li><li>“*line” ：读取下一行</li><li>“*number” ：从串中转换出一个数值</li><li>num ：读取 num 个字符到串</li></ul></li><li><strong>io.lines()</strong><ul><li>io读取当前文件的迭代器</li></ul></li></ul><h2 id="p160-完全IO模式"><a href="#p160-完全IO模式" class="headerlink" title="p160 完全IO模式"></a>p160 完全IO模式</h2><ul><li><p>通过文件句柄</p></li><li><p><strong>f &#x3D; io.open()</strong></p><ul><li>打开文件，获得一个文件句柄，失败返回nil</li></ul></li><li><p><strong>f:read()</strong></p><ul><li>读取文件f</li></ul></li><li><p>预定义的流句柄：</p><ul><li><strong>io.stdin</strong></li><li><strong>io.stdout</strong></li><li><strong>io.stderr</strong></li></ul></li><li><p>IO优化</p><ul><li>*<em>local lines, rest &#x3D; f:read(BUFSIZE, “<em>line”)</em></em> </li><li>读取整个文件时，避免对行进行分割；</li><li>代码中的 rest 就保存了任何可能被段划分切断的行。</li><li>具体使用看书</li></ul></li><li><p>二进制文件</p><ul><li><pre><code class="lua">local inp = assert(io.open(arg[1], &quot;rb&quot;)) local out = assert(io.open(arg[2], &quot;wb&quot;)) local data = inp:read(&quot;*all&quot;) data = string.gsub(data, &quot;\r\n&quot;, &quot;\n&quot;) out:write(data) assert(out:close())-- 用 “b” 表示打开二进制文件&gt; lua prog.lua file.dos file.unix&#39;这样运行时，相当于是吧file.dos file.unix 当作参数传进去了；arg[1] = file.dosarg[2] = file.unix<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 然后就是一些具体的例子了</span><br><span class="line"></span><br><span class="line">- 其他文件操作（知道一下，用到时具体查）</span><br><span class="line"></span><br><span class="line">  - **tmpfile**</span><br><span class="line">    - 返回临时文件句柄（rw），用完自动清除；</span><br><span class="line">  - **flush**</span><br><span class="line">    - 对文件进行修改</span><br><span class="line">  - **filehandle:seek(whence,offset)**</span><br><span class="line">    - 用来设置和获取一个文件当前的存取位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第 22 章 操作系统库</span><br><span class="line"></span><br><span class="line">- **os.time()** </span><br><span class="line"></span><br><span class="line">  - 单位：秒</span><br><span class="line">  - 返回当前时钟的数值</span><br><span class="line">  - 可以带参数，表示距离参数设定的日期的时间（有默认值，可以看一下书）</span><br><span class="line"></span><br><span class="line">- **os.date( “ ”，seconds)**</span><br><span class="line"></span><br><span class="line">  - 可以理解为time函数的反函数；</span><br><span class="line"></span><br><span class="line">  - 这个好高级啊，通过第一个参数设置不同的格式，输出不同的内容：</span><br><span class="line"></span><br><span class="line">    ```lua</span><br><span class="line">    %aabbreviated weekday name (e.g., Wed) </span><br><span class="line">    %Afull weekday name (e.g., Wednesday) </span><br><span class="line">    %b abbreviated month name (e.g., Sep) </span><br><span class="line">    %B full month name (e.g., September) </span><br><span class="line">    %c date and time (e.g., 09/16/98 23:48:10) </span><br><span class="line">    %d day of the month (16) [01-31] </span><br><span class="line">    %H hour, using a 24-hour clock (23) [00-23] </span><br><span class="line">    %I hour, using a 12-hour clock (11) [01-12] </span><br><span class="line">    %M minute (48) [00-59] </span><br><span class="line">    %m month (09) [01-12] </span><br><span class="line">    %p either &quot;am&quot; or &quot;pm&quot; (pm) </span><br><span class="line">    %S second (10) [00-61] </span><br><span class="line">    %w weekday (3) [0-6 = Sunday-Saturday] </span><br><span class="line">    %x date (e.g., 09/16/98) </span><br><span class="line">    %X time (e.g., 23:48:10)</span><br><span class="line">    %Yfull year (1998) </span><br><span class="line">    %y two-digit year (98) [00-99] </span><br><span class="line">    %% the character &#x27;%&#x27;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><strong>os.clock()</strong></p><ul><li><p>返回执行该程序 CPU 花去的时钟秒数。</p></li><li><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local x = os.clock()</span><br><span class="line"></span><br><span class="line">做一些操作...</span><br><span class="line"></span><br><span class="line">print(string.format(&quot;elapsed time: %.2f\n&quot;, os.clock() - x))</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>os.exit()</strong></p><ul><li>终止一个程序</li></ul></li><li><p><strong>os.getnv(“”)</strong></p><ul><li>得到“环境变量”的值。以“变量名”作为参数，返回该变量值的字符串：</li></ul></li><li><p><strong>os.execute( “ “ )</strong></p><ul><li><p>执行一个系统命令（和 C 中的 system</p><p>函数等价）</p></li></ul></li><li><p><strong>os.setlocale()</strong></p><ul><li>设定 Lua程序所使用的区域（locale）。</li><li>这个比较高级…</li></ul></li></ul><h1 id="第-23-章-Debug库"><a href="#第-23-章-Debug库" class="headerlink" title="第 23 章 Debug库"></a>第 23 章 Debug库</h1><h2 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h2><ul><li><p><strong>debug.getinfo()</strong></p><ul><li><p>第一个参数：数字或者函数；</p><ul><li><strong>函数</strong>：返回关于这个函数信息的一个表。</li><li><strong>数字</strong>：返回在 n 级栈的活动函数的信息数据。<ul><li>如果 n&#x3D;1，返回的是正在进行调用的那个函数的信息。（n&#x3D;0 表示 C 函数 getinfo 本身）</li></ul></li></ul></li><li><p>第二个参数：可以用来指定选取哪些信息。</p><ul><li><pre><code>&#39;n&#39; selects fields name and namewhat &#39;f&#39; selects field func &#39;S&#39; selects fields source, short_src, what, and linedefined &#39;l&#39; selects field currentline &#39;u&#39; selects field nup<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 具体例子可以看书</span><br><span class="line"></span><br><span class="line">- **debug.getlocal(level, index)**</span><br><span class="line"></span><br><span class="line">  - 访问任何活动状态的局部变量。</span><br><span class="line"></span><br><span class="line">  - 参数level：将要查询的函数的栈级别；</span><br><span class="line"></span><br><span class="line">  - 参数index：变量的索引。</span><br><span class="line"></span><br><span class="line">  - 函数有两个返回值：变量名和变量当前</span><br><span class="line"></span><br><span class="line">    值。</span><br><span class="line"></span><br><span class="line">  - 书中有例子和解释；</span><br><span class="line"></span><br><span class="line">-  **debug.getupvalue(func, index)**</span><br><span class="line"></span><br><span class="line">  - 访问 Lua 函数的 upvalues。和局部变量</span><br><span class="line"></span><br><span class="line">    不同的是，即使函数不在活动状态他依然有 upvalues（这也就是闭包的意义所在）。所以，</span><br><span class="line"></span><br><span class="line">    getupvalue 的第一个参数不是栈级别而是一个函数（精确的说应该是一个闭包），第二个</span><br><span class="line"></span><br><span class="line">    参数是 upvalue 的索引。</span><br><span class="line"></span><br><span class="line">  - [Lua的upvalue和闭包_lua upvalue-CSDN博客](https://blog.csdn.net/chenjiayi_yun/article/details/25219937)</span><br><span class="line"></span><br><span class="line">## Hooks</span><br><span class="line"></span><br><span class="line">- 书里讲的跟shi一样...啥都没有</span><br><span class="line">- [Lua 调试(Debug) | 菜鸟教程 (runoob.com)](https://www.runoob.com/lua/lua-debug.html)</span><br><span class="line">- [lua学习笔记--注册钩子函数_lua 钩子-CSDN博客](https://blog.csdn.net/weixin_41534481/article/details/120391381)</span><br><span class="line">- 简单来说，就是lua中有一些事件触发的时机，我们可以用sethook()将函数绑定到事件上面，这样当事件发生时会调用这个函数；</span><br><span class="line"></span><br><span class="line">## profiler</span><br><span class="line"></span><br><span class="line">- 好高级东西...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第 24 章 C API 纵览</span><br><span class="line"></span><br><span class="line">- 这一部分主要是 lua  和 c 的交互吧</span><br><span class="line"></span><br><span class="line">- C 和 Lua 之间来能个不协调的问题：</span><br><span class="line">  - Lua 自动进行垃圾回收，C需要显示的分配存储单元；</span><br><span class="line">  - Lua 中的动态类型和C中的静态类型不一致；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 24.1 简介</span><br><span class="line"></span><br><span class="line">- lua_open()：创建一个新环境（lua_state）</span><br><span class="line">  - 所有的标准库以单独的包提供，所以如果你不需要就不会强求你使用它们。</span><br><span class="line">  - 可以用 luaopen_io() 注册io库等等；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 24.2 堆栈</span><br><span class="line"></span><br><span class="line">- 栈在 Lua 与 C 之间交换值；</span><br><span class="line"></span><br><span class="line">- 栈由Lua来管理，垃圾回收器知道那个值正在被 C 使用；</span><br><span class="line"></span><br><span class="line">- 压入元素：</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    void lua_pushnil (lua_State *L); </span><br><span class="line">    void lua_pushboolean (lua_State *L, int bool); </span><br><span class="line">    void lua_pushnumber (lua_State *L, double n); </span><br><span class="line">    void lua_pushlstring (lua_State *L, const char *s, </span><br><span class="line">     size_t length); </span><br><span class="line">    void lua_pushstring (lua_State *L, const char *s);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>int lua_checkstack (lua_State *L, int sz); </p><ul><li>它检测栈上是否有足够你需要的空间</li></ul></li><li><p>查询元素：</p><ul><li><p>API 用索引来访问栈中的元素。在栈中的第一个元素（也就是第一个被压入栈的）有索引 1，下一个有索引 2，以此类推。我们也可以用栈顶作为参照来存取元素，利用负索引。</p></li><li><p>检查一个元素是否是一个指定的类型：</p><ul><li>int lua_is… (lua_State *L, int index); </li><li>lua_isnumber，lua_isstring，lua_istable；</li></ul></li><li><p>获取栈中元素的类型：</p><ul><li>lua_type</li><li>类型常量：LUA_TNIL、LUA_TBOOLEAN 、 LUA_TNUMBER 、 LUA_TSTRING 、 LUA_TTABLE 、LUA_TFUNCTION、LUA_TUSERDATA 以及 LUA_TTHREAD。</li></ul></li><li><p>获取栈中元素的值：</p><ul><li><p>用 lua_to*函数：</p></li><li><pre><code>int lua_toboolean (lua_State *L, int index); double lua_tonumber (lua_State *L, int index); const char * lua_tostring (lua_State *L, int index); size_t lua_strlen (lua_State *L, int index);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 当元素类型和函数类型不匹配时：</span><br><span class="line"></span><br><span class="line">  - lua_toboolean、lua_tonumber 和 lua_strlen 返回 0，其他函数返回 NULL。</span><br><span class="line"></span><br><span class="line">- 注意：</span><br><span class="line"></span><br><span class="line">  - 当一个 C 函数返回后，Lua 会清理他的栈，所以，有一个原则：永远不要将指向 Lua 字</span><br><span class="line"></span><br><span class="line">    符串的指针保存到访问他们的外部函数中。</span><br><span class="line"></span><br><span class="line">- 其他堆栈操作</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    int lua_gettop (lua_State *L); </span><br><span class="line">    -- 返回堆栈中元素个数，它也是栈顶元素的索引；</span><br><span class="line">    </span><br><span class="line">    void lua_settop (lua_State *L, int index); </span><br><span class="line">    --[[</span><br><span class="line">    lua_settop 设置栈顶（也就是堆栈中的元素个数）为一</span><br><span class="line">    个指定的值。如果开始的栈顶高于新的栈顶，顶部的值被丢弃。否则，为了得到指定的</span><br><span class="line">    大小这个函数压入相应个数的空值（nil）到栈上。特别的，lua_settop(L,0)清空堆栈。你</span><br><span class="line">    也可以用负数索引作为调用 lua_settop 的参数；那将会设置栈顶到指定的索引。利用这</span><br><span class="line">    种技巧，API 提供了下面这个宏，它从堆栈中弹出 n 个元素：</span><br><span class="line">    #define lua_pop(L,n) lua_settop(L, -(n)-1</span><br><span class="line">    ]]--</span><br><span class="line">    </span><br><span class="line">    void lua_pushvalue (lua_State *L, int index); </span><br><span class="line">    -- lua_pushvalue 压入堆栈上指定索引的一个抟贝到栈顶；</span><br><span class="line">    </span><br><span class="line">    void lua_remove (lua_State *L, int index); </span><br><span class="line">    -- lua_remove 移除指定索引位置的元素，并将其上面所有的元素下移来填补这个位置的空白；</span><br><span class="line">    </span><br><span class="line">    void lua_insert (lua_State *L, int index); </span><br><span class="line">    --lua_insert 移动栈顶元素到指定索引的位置，并将这个索引位置上面的元素全部上移至栈顶被移动留下的空隔；</span><br><span class="line">    </span><br><span class="line">    void lua_replace (lua_State *L, int index);</span><br><span class="line">    --lua_replace 从栈顶弹出元素值并将其设置到指定索引位置，没有任何移动操</span><br><span class="line">    作。</span><br></pre></td></tr></table></figure></code></pre></li><li><p>24.2 有例子</p></li></ul></li></ul></li></ul><h1 id="第-25-章-扩展你的程序"><a href="#第-25-章-扩展你的程序" class="headerlink" title="第 25 章 扩展你的程序"></a>第 25 章 扩展你的程序</h1><h2 id="p189"><a href="#p189" class="headerlink" title="p189"></a>p189</h2><p>用 Lua 做配置文件，书里有个例子，讲的比较清除；</p><ul><li>luaL_loadfile(L, filename)<ul><li>加载 lua 文件</li></ul></li><li>lua_pcall<ul><li>调用函数</li></ul></li><li>lua_getglobal(L , “globalname”)<ul><li>每调用一次就把相应的变量值压入lua栈顶</li></ul></li></ul><h2 id="25-1-表操作"><a href="#25-1-表操作" class="headerlink" title="25.1 表操作"></a>25.1 表操作</h2><p>书里讲的不是特别清除… 看这里：</p><p><a href="https://blog.csdn.net/tianyexing2008/article/details/126705380">lua_gettable 函数详解_lua_getglobal-CSDN博客</a></p><p>这个讲的很清楚；</p><ul><li>关键是要理解 lua_gettable：<ul><li>先把key值压入栈顶</li><li>调用 lua_gettable(L, index) 时，会弹出栈顶的key值，然后找到lua栈中对应的index的table，然后再取到 table 的 key 值（table[key]），然后将这个值再次压入栈顶；</li></ul></li></ul><p><a href="https://www.cnblogs.com/Cxiangyang/p/13592224.html">lua_gettable和lua_settable - 乐swap火 - 博客园 (cnblogs.com)</a></p><ul><li>lua_settable 可以看这里，也是比较好理解的；<ul><li>修改表中对应key值的value</li><li>先把key入栈，再把value入栈，然后调用 lua_settable(L, index);</li><li>此时会把 key  和 value 都弹出栈，然后将lua栈中的对应的index 的table 的 key 修改为value</li></ul></li></ul><h2 id="25-2-调用-lua-函数"><a href="#25-2-调用-lua-函数" class="headerlink" title="25.2 调用 lua 函数"></a>25.2 调用 lua 函数</h2><ul><li>将被调用的函数入栈（可以用lua_getglobal，将要执行的函数入栈）</li><li>以此将所有参数入栈</li><li>使用 lua_pcall 调用函数；<ul><li>这一小节的最后有详细介绍了lua_pcall 函数；</li><li>参数：<ul><li>lua 栈</li><li>参数个数</li><li>返回值个数</li><li>错误处理函数（0表示没有，如果有，需要在函数和参数入栈之前入栈）</li></ul></li></ul></li><li>最后从栈中获取函数执行的返回结果</li></ul><h1 id="第-26-章-调用-C-函数"><a href="#第-26-章-调用-C-函数" class="headerlink" title="第 26 章 调用 C 函数"></a>第 26 章 调用 C 函数</h1><ul><li>将 C 函数注册到 Lua 中去；</li><li>用来交互的栈不是全局变量，每一个函数都有他自己的私有栈。</li><li>函数在将返回值入栈之前不需要清理栈，因为C函数会返回一个（返回值个数）</li><li>C函数返回之后，Lua 自动的清除栈中返回结果下面的所有内容。</li><li>呃，注册函数这一块有点小复杂啊；<ul><li><a href="https://blog.csdn.net/vermilliontear/article/details/50947379">快速掌握Lua 5.3 —— 从Lua中调用C函数_lua 如何调用c函数-CSDN博客</a></li><li>这里讲的非常清除！！！</li></ul></li></ul><h1 id="第-27-章-撰写-C-函数的技巧"><a href="#第-27-章-撰写-C-函数的技巧" class="headerlink" title="第 27 章 撰写 C 函数的技巧"></a>第 27 章 撰写 C 函数的技巧</h1><p>在这一章我们将讨论数组操纵、string 处理、在 C 中存储 Lua 值等一些特殊的机制。</p><h2 id="27-1-数组操作"><a href="#27-1-数组操作" class="headerlink" title="27.1 数组操作"></a>27.1 数组操作</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取数组（table）表中的元素（key对应的value）</span></span><br><span class="line">void lua_rawgeti (lua_State *L, int index, int key);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置数组（table）表中的元素（key对应的value，value应该放在栈顶，然后才能设置）</span></span><br><span class="line">void lua_rawseti (lua_State *L, int index, int key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index 指向 <span class="built_in">table</span> 在栈中的位置；</span><br><span class="line">key 指向元素在 <span class="built_in">table</span> 中的位置。</span><br></pre></td></tr></table></figure><h2 id="27-2-字符串处理"><a href="#27-2-字符串处理" class="headerlink" title="27.2 字符串处理"></a>27.2 字符串处理</h2><ul><li><p>C函数 接受 lua 的字符串作为参数时的原则：</p><ul><li>当字符串正在被访问的时候不要将其出栈；</li><li>永远不要修改字符串；</li></ul></li><li><p><em><em>lua_pushlstring(L, start</em>, len)</em>*</p><ul><li>从start开始截取长度为len的字符串，并压入栈顶；</li><li>start*时一个指针，比如 s+i，s&#x3D;char*</li></ul></li><li><p><strong>lua_concat(L,n)</strong></p><ul><li><p>将连接(同时会出栈)栈顶的 n 个值，并</p><p>将最终结果（字符串）放到栈顶。</p></li></ul></li><li><p>提高连接大量字符串的效率：使用辅助库提供的 buffer 相关函数；</p><ul><li><pre><code class="lua">void luaL_buffinit (lua_State *L, luaL_Buffer *B); void luaL_putchar (luaL_Buffer *B, char c);void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l); void luaL_addstring (luaL_Buffer *B, const char *s); void luaL_pushresult (luaL_Buffer *B);-- 来将位于栈顶的值放入 buffervoid luaL_addvalue (luaL_Buffer *B);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 具体例子可以看书；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 27.3 在 C 函数中保存状态</span><br><span class="line"></span><br><span class="line">### 27.3.1 The Registry</span><br><span class="line"></span><br><span class="line">- Lua 提供了一个独立的被称为 registry 的表，C代码可以自由使用，但 Lua 代码不能访问他。</span><br><span class="line">- 由于所有的 C 库共享相同的 registry ，你必须注意使用什么样的值作为 key，否则会导致命名冲突。一个防止命名冲突的方法是使用 static 变量的地址作为 key：C 链接器保证在所有的库中这个 key 是唯一的。</span><br><span class="line">- 书中有使用例子；</span><br><span class="line"></span><br><span class="line">### 27.3.2 References</span><br><span class="line"></span><br><span class="line">- 永远不要使用数字作为 registry 的 key，因为这种类型的 key 是保留给 reference 系统使用。</span><br><span class="line"></span><br><span class="line">- Reference 系统是由辅助库中的一对函数组成，这对函数用来不需要担心名称冲突的将值保存到 registry 中去。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  int r = luaL_ref(L, LUA_REGISTRYINDEX);</span><br><span class="line">  </span><br><span class="line">  从栈中弹出一个值，以一个新的数字作为 key 将其保存到 registry 中，并返回这个key。我们将这个 key 称之为reference。</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>作用：</p><ul><li>将一个指向 Lua 值的 reference 存储到一个 C 结构体中。</li><li>当我们需要这种指针（指向Lua对象的指针，Lua 本身不提供指向其他对象的指针）的时候，我们创建一个 reference 并将其保存在 C 中。</li></ul></li><li><pre><code class="lua">-- 要想将一个 reference 的对应的值入栈，只需要：lua_rawgeti(L, LUA_REGISTRYINDEX, r);-- 最后，我们调用下面的函数释放值和 reference：luaL_unref(L, LUA_REGISTRYINDEX, r);-- reference 系统也定义了常量 LUA_NOREF，她是一个表示任何非有效的 reference 的整数值，用来标记无效的 reference。任何企图获取 LUA_NOREF 返回 nil，任何释放他的操作都没有效果。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 27.3.3 Upvalue</span><br><span class="line"></span><br><span class="line">- C 闭包... 有点高级...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第 28 章 User-Defined Types in C</span><br><span class="line"></span><br><span class="line">## 28.1 Userdata</span><br><span class="line"></span><br><span class="line">我们首先关心的是如何在 Lua 中表示数组的值。Lua 为这种情况提供专门提供一个基本的类型：**userdata**。</span><br><span class="line"></span><br><span class="line">一个 userdatum 提供了一个在 Lua 中没有预定义操作的 raw 内存区域。</span><br><span class="line"></span><br><span class="line">Lua API 提供了下面的函数用来创建一个 userdatum：</span><br><span class="line"></span><br><span class="line">**void *lua_newuserdata (lua_State *L, size_t size);** </span><br><span class="line"></span><br><span class="line">- lua_newuserdata 函数按照指定的大小分配一块内存，将对应的 userdatum 放到栈内，并返回内存块的地址。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面看一下书中的例子：</span><br><span class="line"></span><br><span class="line">在 C 中定义数据类型（数组），然后给 lua 去使用：</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"></span><br><span class="line">// 表示一个 double 类型的数组</span><br><span class="line">typedef struct NumArray </span><br><span class="line">&#123; </span><br><span class="line">    int size;           // 数组大小</span><br><span class="line">    double values[1];   // 相当于是标记一下值</span><br><span class="line">&#125; NumArray;</span><br><span class="line"></span><br><span class="line">// 创建数组（Lua 那边传进来一个数组的大小 n）</span><br><span class="line">static int newarray (lua_State *L) </span><br><span class="line">&#123; </span><br><span class="line">    int n = luaL_checkint(L, 1);        // 获取数组大小</span><br><span class="line">    size_t nbytes = sizeof(NumArray) + (n - 1)*sizeof(double);  // 求一下数组占用的内存大小</span><br><span class="line">    NumArray *a = (NumArray *)lua_newuserdata(L, nbytes);       // 创建一个 userdatum（就是一块内存空间，放在栈中）</span><br><span class="line">    a-&gt;size = n;    // 设置一下数组的大小</span><br><span class="line">    return 1;       // 到这里，一个新的 userdatum 就在栈中了</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置数组的值（传进来一个 数组指针，下标，值）</span><br><span class="line">static int setarray (lua_State *L) &#123; </span><br><span class="line">    NumArray *a = (NumArray *)lua_touserdata(L, 1);     // 获取数组（userdatum）</span><br><span class="line">    int index = luaL_checkint(L, 2);                    // 获取要修改的下标</span><br><span class="line">    double value = luaL_checknumber(L, 3);              // 获取值</span><br><span class="line">    luaL_argcheck(L, a != NULL, 1, &quot;`array&#x27; expected&quot;); // 检查参数</span><br><span class="line">    luaL_argcheck(L, 1 &lt;= index &amp;&amp; index &lt;= a-&gt;size, 2, &quot;index out of range&quot;);  // 检查参数</span><br><span class="line">    a-&gt;values[index-1] = value;                         // 设置一下值</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取一个数组元素(传进来: 数组指针, 下标)</span><br><span class="line">static int getarray (lua_State *L) </span><br><span class="line">&#123; </span><br><span class="line">    NumArray *a = (NumArray *)lua_touserdata(L, 1);     // 获取数组</span><br><span class="line">    int index = luaL_checkint(L, 2);                    // 获取下标</span><br><span class="line">    luaL_argcheck(L, a != NULL, 1, &quot;&#x27;array&#x27; expected&quot;); </span><br><span class="line">    luaL_argcheck(L, 1 &lt;= index &amp;&amp; index &lt;= a-&gt;size, 2, &quot;index out of range&quot;); </span><br><span class="line">    lua_pushnumber(L, a-&gt;values[index-1]);              // 获取数组的值, 并压入栈</span><br><span class="line">    return 1; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取数组的带下</span><br><span class="line">static int getsize (lua_State *L) </span><br><span class="line">&#123; </span><br><span class="line">    NumArray *a = (NumArray *)lua_touserdata(L, 1); </span><br><span class="line">    luaL_argcheck(L, a != NULL, 1, &quot;`array&#x27; expected&quot;); </span><br><span class="line">    lua_pushnumber(L, a-&gt;size); </span><br><span class="line">    return 1; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 注册一下 C 函数给 Lua 调用</span><br><span class="line">static const struct luaL_reg arraylib [] = </span><br><span class="line">&#123; </span><br><span class="line">    &#123;&quot;new&quot;, newarray&#125;, </span><br><span class="line">    &#123;&quot;set&quot;, setarray&#125;, </span><br><span class="line">    &#123;&quot;get&quot;, getarray&#125;, </span><br><span class="line">    &#123;&quot;size&quot;, getsize&#125;, </span><br><span class="line">    &#123;NULL, NULL&#125; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">// 打开这个C库</span><br><span class="line">int luaopen_array (lua_State *L) </span><br><span class="line">&#123; </span><br><span class="line">    luaL_openlib(L, &quot;array&quot;, arraylib, 0); </span><br><span class="line">    return 1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 下面就是使用的例子了</span></span><br><span class="line">a = array.new(<span class="number">1000</span>)     <span class="comment">-- 创建一个大小为1000的数组</span></span><br><span class="line"><span class="built_in">print</span>(a)                <span class="comment">-- 输出: userdata 的地址 </span></span><br><span class="line"><span class="built_in">print</span>(array.size(a))    <span class="comment">-- 输出: 1000</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">    array.set(a, i, <span class="number">1</span>/i) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(array.get(a, <span class="number">10</span>)) <span class="comment">--&gt; 0.1</span></span><br></pre></td></tr></table></figure><h2 id="28-2-Metatables"><a href="#28-2-Metatables" class="headerlink" title="28.2 Metatables"></a>28.2 Metatables</h2><p>细节… 复杂起来了；</p><p>为数组创建了一个metatable（记住userdata 也可以拥有 metatables）。下面，我们每次创建一个新的数组的时候，我们将这个单独 metatable 标记为数组的 metatable。每次我们访问数组的时候，我们都要检查他是否有一个正确的 metatable。</p><p><strong>因为 Lua 代码不能改变 userdatum 的 metatable，所以他不会伪造我们的代码。</strong></p><p>具体例子可以看一下书；</p><p>相当于是通过 metatable 给数组打了一个标记，区分了 数组 和 其他的 userdata；</p><p>然后在调用的时候检查一下 userdata 是否是数组；</p><h2 id="28-3-访问面向对象的数据"><a href="#28-3-访问面向对象的数据" class="headerlink" title="28.3 访问面向对象的数据"></a>28.3 访问面向对象的数据</h2><p>复杂起来了… </p><p>这一小节讲的是如何通过面向对象的方式去访问数据；</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = array.new(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">array.size(a)</span><br><span class="line">=&gt;</span><br><span class="line">a:size()</span><br></pre></td></tr></table></figure><p>这儿的关键在于__index 元方法（metamethod）的使用。对于表来说，不管什么时候只要找不到给定的 key，这个元方法就会被调用。</p><h2 id="28-5-Light-Userdata"><a href="#28-5-Light-Userdata" class="headerlink" title="28.5 Light Userdata"></a>28.5 Light Userdata</h2><p><a href="https://zhuanlan.zhihu.com/p/595959126">《Lua5.4 源码剖析——基本数据类型 之 UserData》 - 知乎 (zhihu.com)</a></p><p>Light userdata 真正的用处在于可以表示不同类型的对象。当 full userdata 是一个对象的时候，它等于对象自身；另一方面，light userdata 表示的是一个指向对象的指针，同样的，它等于指针指向的任何类型的 userdata。所以，我们在 Lua 中使用 light userdata表示 C 对象。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Lua/">Lua</category>
      
      
      <category domain="http://example.com/tags/Lua/">Lua</category>
      
      
      <comments>http://example.com/2023/12/17/Programming%20in%20Lua%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GAMES 104 随笔</title>
      <link>http://example.com/2023/11/01/GAMES%20104%20%E9%9A%8F%E7%AC%94/</link>
      <guid>http://example.com/2023/11/01/GAMES%20104%20%E9%9A%8F%E7%AC%94/</guid>
      <pubDate>Wed, 01 Nov 2023 14:02:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;这篇文章是 GAMES 104 随笔&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要是暂时没那么多时间去详细记录，等以后有时间二刷了再细细总结；&lt;/p&gt;
&lt;p&gt;这个是 Games104 的官网，做的是真的好！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://games</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>这篇文章是 GAMES 104 随笔</strong></p><p>主要是暂时没那么多时间去详细记录，等以后有时间二刷了再细细总结；</p><p>这个是 Games104 的官网，做的是真的好！</p><p><a href="https://games104.boomingtech.com/sc/">GAMES104 - 现代游戏引擎入门必修课 (boomingtech.com)</a></p><h1 id="第二节-引擎架构的分层"><a href="#第二节-引擎架构的分层" class="headerlink" title="第二节 引擎架构的分层"></a>第二节 引擎架构的分层</h1><p>这里直接搬了别人的，侵删。</p><p><a href="https://zhuanlan.zhihu.com/p/613887146">Games104学习笔记（2） - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/598348720">GAMES104：现代游戏引擎架构分层 - 知乎 (zhihu.com)</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/GAMES-104/">GAMES 104</category>
      
      
      <category domain="http://example.com/tags/GAMES-104/">GAMES 104</category>
      
      
      <comments>http://example.com/2023/11/01/GAMES%20104%20%E9%9A%8F%E7%AC%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【UE4】宏</title>
      <link>http://example.com/2023/10/31/%E3%80%90UE4%E3%80%91%E5%AE%8F/</link>
      <guid>http://example.com/2023/10/31/%E3%80%90UE4%E3%80%91%E5%AE%8F/</guid>
      <pubDate>Tue, 31 Oct 2023 13:50:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;分享一下查阅到的资料，总结的太好了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://benui.ca/unreal/uproperty/&quot;&gt;UPROPERTY()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://benui.ca/</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>分享一下查阅到的资料，总结的太好了！</strong></p><p><a href="https://benui.ca/unreal/uproperty/">UPROPERTY()</a></p><p><a href="https://benui.ca/unreal/ufunction/">UFUNCTION()</a></p><p><a href="https://benui.ca/unreal/uclass/">UCLASS()</a></p><p><a href="https://benui.ca/unreal/ustruct/">USTRUCT()</a></p><p><a href="https://benui.ca/unreal/uinterface/">UINTERFACE()</a></p><p><a href="https://benui.ca/unreal/uparam/">UPPARAM()</a></p><p><a href="https://benui.ca/unreal/uenum-umeta/">UENUM() 、UMETA()</a></p><p>下面是自己总结自用的，感觉有些不常用的我就没列出来了，可以看看原文，写的真的详细，还有图片展示。</p><h1 id="UPROPERTY"><a href="#UPROPERTY" class="headerlink" title="UPROPERTY()"></a>UPROPERTY()</h1><p>主要有一下相关分类：</p><ul><li>编辑器</li><li>数据修饰的</li><li>序列化</li><li>蓝图逻辑</li><li>网络</li><li>UMG</li><li>数据表</li><li>蓝图</li><li>Console</li><li>脚本</li><li>资产注册</li><li>配置文件</li><li>动画</li><li>材质</li><li>C++</li></ul><p>实在是太多了…</p><p>下面是选项：</p><h2 id="VisibleAnywhere"><a href="#VisibleAnywhere" class="headerlink" title="VisibleAnywhere"></a>VisibleAnywhere</h2><ul><li><p>编辑器可见（不可编辑），蓝图不可见；</p></li><li><p>不兼容：</p><ul><li><a href="https://benui.ca/unreal/uproperty/#visibledefaultsonly"><code>VisibleDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleinstanceonly"><code>VisibleInstanceOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editanywhere"><code>EditAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editdefaultsonly"><code>EditDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editinstanceonly"><code>EditInstanceOnly</code></a></li></ul></li></ul><h2 id="VisibleDefaultsOnly"><a href="#VisibleDefaultsOnly" class="headerlink" title="VisibleDefaultsOnly"></a>VisibleDefaultsOnly</h2><ul><li>蓝图 <strong>类</strong> 的 <strong>Details</strong> 面板中可见（只读），实例中不可见。</li><li>不兼容：<ul><li><a href="https://benui.ca/unreal/uproperty/#visibleanywhere"><code>VisibleAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleinstanceonly"><code>VisibleInstanceOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editanywhere"><code>EditAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editdefaultsonly"><code>EditDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editinstanceonly"><code>EditInstanceOnly</code></a></li></ul></li></ul><h2 id="VisibleInstanceOnly"><a href="#VisibleInstanceOnly" class="headerlink" title="VisibleInstanceOnly"></a>VisibleInstanceOnly</h2><ul><li>蓝图实例的 <strong>Details</strong> 面板中可见，蓝图中不可见。</li><li>不兼容：<ul><li><a href="https://benui.ca/unreal/uproperty/#visibleanywhere"><code>VisibleAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibledefaultsonly"><code>VisibleDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editanywhere"><code>EditAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editdefaultsonly"><code>EditDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editinstanceonly"><code>EditInstanceOnly</code></a></li></ul></li></ul><h2 id="EditAnywhere"><a href="#EditAnywhere" class="headerlink" title="EditAnywhere"></a>EditAnywhere</h2><ul><li>蓝图 <strong>类</strong> 和 <strong>实例</strong> 的 <strong>Details</strong> 面板中可见（只读）。</li><li>不兼容：<ul><li><a href="https://benui.ca/unreal/uproperty/#editdefaultsonly"><code>EditDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#editinstanceonly"><code>EditInstanceOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleanywhere"><code>VisibleAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibledefaultsonly"><code>VisibleDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleinstanceonly"><code>VisibleInstanceOnly</code></a></li></ul></li></ul><h2 id="EditInstanceOnly"><a href="#EditInstanceOnly" class="headerlink" title="EditInstanceOnly"></a>EditInstanceOnly</h2><ul><li>蓝图 细节面板 可以编辑，蓝图图表中 不行；</li></ul><h2 id="EditDefaultsOnly"><a href="#EditDefaultsOnly" class="headerlink" title="EditDefaultsOnly"></a>EditDefaultsOnly</h2><ul><li>细节面板可编辑</li><li>不兼容：<ul><li><a href="https://benui.ca/unreal/uproperty/#editanywhere"><code>EditAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleanywhere"><code>VisibleAnywhere</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibledefaultsonly"><code>VisibleDefaultsOnly</code></a></li><li><a href="https://benui.ca/unreal/uproperty/#visibleinstanceonly"><code>VisibleInstanceOnly</code></a></li></ul></li></ul><h2 id="meta-HideInDetailPanel"><a href="#meta-HideInDetailPanel" class="headerlink" title="meta&#x3D;(HideInDetailPanel)"></a>meta&#x3D;(HideInDetailPanel)</h2><ul><li>显然，隐藏</li></ul><h2 id="meta-ShowOnlyInnerProperties"><a href="#meta-ShowOnlyInnerProperties" class="headerlink" title="meta&#x3D;(ShowOnlyInnerProperties)"></a>meta&#x3D;(ShowOnlyInnerProperties)</h2><ul><li>用于修饰结构体成员变量，意思就是，被修饰的结构体会被展开，但是不能点击（编辑），而且被嵌套在里面的结构体不会被展开！可以用于隐藏结构。</li></ul><h2 id="Category-“abc”"><a href="#Category-“abc”" class="headerlink" title="Category &#x3D; “abc”"></a>Category &#x3D; “abc”</h2><ul><li>分类，把被同一 Category 修饰的属性在细节面板中分类在一起；</li><li>可以嵌套分类：<ul><li>Animals<ul><li>Animals|Birds</li><li>Animals|Dogs</li></ul></li><li>Animals 类别下又有两类：Birds，Dogs。</li></ul></li></ul><h2 id="meta-DisplayName-”abc”"><a href="#meta-DisplayName-”abc”" class="headerlink" title="meta&#x3D;(DisplayName&#x3D;”abc”)"></a>meta&#x3D;(DisplayName&#x3D;”abc”)</h2><ul><li>将被修饰的属性改名字为 abc，配合 EditAnywhere 一起用；</li></ul><h2 id="meta-ToolTip-“abc”"><a href="#meta-ToolTip-“abc”" class="headerlink" title="meta&#x3D;(ToolTip&#x3D;“abc”)"></a>meta&#x3D;(ToolTip&#x3D;“abc”)</h2><ul><li>将鼠标悬停在属性上时，显示包含此文本的工具提示（abc）。</li></ul><h2 id="AdvancedDisplay"><a href="#AdvancedDisplay" class="headerlink" title="AdvancedDisplay"></a>AdvancedDisplay</h2><ul><li>将属性折叠起来，需要点击箭头才能展开</li><li>不兼容：<a href="https://benui.ca/unreal/uproperty/#simpledisplay"><code>SimpleDisplay</code></a></li></ul><h2 id="SimpleDisplay"><a href="#SimpleDisplay" class="headerlink" title="SimpleDisplay"></a>SimpleDisplay</h2><ul><li>和上面是相反的属性修饰</li></ul><h2 id="InlineEditConditionToggle"><a href="#InlineEditConditionToggle" class="headerlink" title="InlineEditConditionToggle"></a>InlineEditConditionToggle</h2><ul><li>将一个 bool 类型的成员变量，附在被 InlineEditConditionToggle 修饰的属性的左边，也就是两个属性合在一起；bool 不会单独显示；</li></ul><h2 id="DisplayAfter"><a href="#DisplayAfter" class="headerlink" title="DisplayAfter"></a>DisplayAfter</h2><ul><li>用于定义属性在编辑器展示的先后顺序，详细看原文；</li></ul><h2 id="DisplayPriority"><a href="#DisplayPriority" class="headerlink" title="DisplayPriority"></a>DisplayPriority</h2><ul><li>这个更牛，给编号，按编号从小到大排序属性；</li></ul><p>然后是一些限制编辑操作的：<br><a href="https://benui.ca/unreal/uproperty/#numeric">数值上的</a></p><h2 id="meta-AllowedClasses-“Texture”"><a href="#meta-AllowedClasses-“Texture”" class="headerlink" title="meta &#x3D; (AllowedClasses &#x3D; “Texture”)"></a>meta &#x3D; (AllowedClasses &#x3D; “Texture”)</h2><ul><li>限制一下类类型</li></ul><h2 id="BlueprintAssignable"><a href="#BlueprintAssignable" class="headerlink" title="BlueprintAssignable"></a>BlueprintAssignable</h2><ul><li>定义委托的时候声明这个，表示蓝图可以使用该委托</li></ul><h1 id="UFUNCTION"><a href="#UFUNCTION" class="headerlink" title="UFUNCTION"></a>UFUNCTION</h1><p>下面是相关的分类：</p><ul><li>蓝图逻辑</li><li>编辑器</li><li>常规</li><li>c++</li><li>Console</li><li>外观</li><li>Debug</li><li>网络</li><li>…</li></ul><p>常用的就是前面几个蓝图逻辑</p><h2 id="BlueprintCallable"><a href="#BlueprintCallable" class="headerlink" title="BlueprintCallable"></a>BlueprintCallable</h2><p>蓝图可调用</p><h2 id="BlueprintNativeEvent-和-BlueprintImplementableEvent"><a href="#BlueprintNativeEvent-和-BlueprintImplementableEvent" class="headerlink" title="BlueprintNativeEvent 和 BlueprintImplementableEvent"></a>BlueprintNativeEvent 和 BlueprintImplementableEvent</h2><p><a href="https://blog.csdn.net/luomogenhaoqi/article/details/89311695">UE4函数标记BlueprintImplementableEvent和BlueprintNativeEvent区别-CSDN博客</a></p><p>后面还有好多 …</p><p>这下知道为什么 UE 好资料比较少了… </p><p>一拉就是一大块，又多又杂又难…</p><p>没有时间和毅力真的很难坚持…</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/UE4/">UE4</category>
      
      
      <category domain="http://example.com/tags/UE4/">UE4</category>
      
      
      <comments>http://example.com/2023/10/31/%E3%80%90UE4%E3%80%91%E5%AE%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【UE4】委托 / 代理</title>
      <link>http://example.com/2023/10/25/%E3%80%90UE4%E3%80%91%E5%A7%94%E6%89%98%EF%BC%88%E4%BB%A3%E7%90%86%EF%BC%89/</link>
      <guid>http://example.com/2023/10/25/%E3%80%90UE4%E3%80%91%E5%A7%94%E6%89%98%EF%BC%88%E4%BB%A3%E7%90%86%EF%BC%89/</guid>
      <pubDate>Wed, 25 Oct 2023 13:06:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;先放链接再这，有时间总结一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuan</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>先放链接再这，有时间总结一下。</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/419232568">UE4代理(委托)概览 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/575671003">UE4中的委托及实现原理 - 知乎 (zhihu.com)</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/UE4/">UE4</category>
      
      
      <category domain="http://example.com/tags/UE4/">UE4</category>
      
      
      <comments>http://example.com/2023/10/25/%E3%80%90UE4%E3%80%91%E5%A7%94%E6%89%98%EF%BC%88%E4%BB%A3%E7%90%86%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【UE4】小知识 / 问题 汇总</title>
      <link>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E5%B0%8F%E7%9F%A5%E8%AF%86%E3%80%81%E9%97%AE%E9%A2%98%20%E6%B1%87%E6%80%BB/</link>
      <guid>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E5%B0%8F%E7%9F%A5%E8%AF%86%E3%80%81%E9%97%AE%E9%A2%98%20%E6%B1%87%E6%80%BB/</guid>
      <pubDate>Tue, 24 Oct 2023 13:39:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;记录一些 UE4 常用的知识&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;小知识&quot;&gt;&lt;a href=&quot;#小知识&quot; class=&quot;headerlink&quot; title=&quot;小知识&quot;&gt;&lt;/a&gt;小知识&lt;/h1&gt;&lt;h2 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; clas</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>记录一些 UE4 常用的知识</strong></p><h1 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出日志到文件中</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出到屏幕上</span></span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">20</span>, FColor::Yellow, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候要输出一下 FSting</span></span><br><span class="line">FString fs = <span class="string">&quot;asd&quot;</span>;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), *fs);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><h3 id="获取，设置-Actor-的位置和旋转"><a href="#获取，设置-Actor-的位置和旋转" class="headerlink" title="获取，设置 Actor 的位置和旋转"></a>获取，设置 Actor 的位置和旋转</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FVector NewLocation = <span class="built_in">GetActorLocation</span>();</span><br><span class="line">FRotator NewRotation = <span class="built_in">GetActorRotation</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetActorLocationAndRotation</span>(NewLocation, NewRotation);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些函数都是 Actor 的成员函数，继承后直接用就行了</span></span><br></pre></td></tr></table></figure><h3 id="获取-GameState"><a href="#获取-GameState" class="headerlink" title="获取 GameState"></a>获取 GameState</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AMyGameStateBase* GS = <span class="built_in">Cast</span>&lt;AMyGameStateBase&gt;(<span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetGameState</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">GetWorld</span>() 是 Actor 里面的函数；</span><br></pre></td></tr></table></figure><h3 id="获取-GameMode"><a href="#获取-GameMode" class="headerlink" title="获取 GameMode"></a>获取 GameMode</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/GameplayStatics.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> AMyGameModeBase* GM = <span class="built_in">Cast</span>&lt;AMyGameModeBase&gt;(UGameplayStatics::<span class="built_in">GetGameMode</span>(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line">AMyGameModeBase* GM = <span class="built_in">Cast</span>&lt;AMyGameModeBase&gt;(<span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetAuthGameMode</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：(GetDefaultGameMode() 是 AGameStateBase 里面的)</span></span><br><span class="line"><span class="type">const</span> AMyGameModeBase* GM = <span class="built_in">Cast</span>&lt;AMyGameModeBase&gt;(<span class="built_in">GetDefaultGameMode</span>());</span><br></pre></td></tr></table></figure><h3 id="通过反射，直接获取蓝图中配置的信息"><a href="#通过反射，直接获取蓝图中配置的信息" class="headerlink" title="通过反射，直接获取蓝图中配置的信息"></a>通过反射，直接获取蓝图中配置的信息</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FString AIPath = <span class="string">&quot;Blueprint&#x27;&quot;</span>;</span><br><span class="line">AIPath.<span class="built_in">Append</span>(M_SoldierInfoList[i].<span class="built_in">ToString</span>());</span><br><span class="line">AIPath.<span class="built_in">Append</span>(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">UClass* AIClass = <span class="built_in">LoadClass</span>&lt;AAICharacter_Base&gt;(<span class="literal">NULL</span>, *AIPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (AIClass)</span><br><span class="line">&#123;</span><br><span class="line">    AAICharacter_Base* AI_Base = <span class="built_in">Cast</span>&lt;AAICharacter_Base&gt;(AIClass-&gt;<span class="built_in">GetDefaultObject</span>());</span><br><span class="line">    <span class="keyword">if</span> (AI_Base)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 通过 GetDefaultObject() 获取到的 AI_Base 就是蓝图本身的这个Object；</span></span><br><span class="line">    <span class="comment">// 然后在这里就可以直接获取到蓝图身上的东西了（我们可以往蓝图上面配置东西）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><h3 id="从-c-中加载-UI"><a href="#从-c-中加载-UI" class="headerlink" title="从 c++ 中加载 UI"></a>从 c++ 中加载 UI</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1：</span></span><br><span class="line">FString HUDClassLoadPath = <span class="built_in">FString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Blueprint&#x27;/Game/Blueprints/HUD.HUD_C&#x27;&quot;</span>));</span><br><span class="line"><span class="keyword">auto</span> MyUIClass = <span class="built_in">LoadClass</span>&lt;UUserWidget&gt;(<span class="literal">NULL</span>, *HUDClassLoadPath);</span><br><span class="line"><span class="keyword">if</span> (MyUIClass != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    UUserWidget* MyUI = <span class="built_in">CreateWidget</span>&lt;UUserWidget&gt;(<span class="built_in">GetWorld</span>(), MyUIClass);</span><br><span class="line">    <span class="keyword">if</span> (MyUI != <span class="literal">nullptr</span>) MyUI-&gt;<span class="built_in">AddToViewport</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：</span></span><br><span class="line">FString UiPath = <span class="built_in">TEXT</span>(<span class="string">&quot;/Script/UMGEditor.WidgetBlueprint&#x27;/Game/Blueprints/HUD.HUD_C&#x27;&quot;</span>);<span class="comment">//动态加载UI 类</span></span><br><span class="line">UClass* MyUIClass = <span class="built_in">LoadClass</span>&lt;UUserWidget&gt;(<span class="literal">nullptr</span>, *UiPath);</span><br><span class="line"><span class="keyword">if</span> (MyUIClass)</span><br><span class="line">&#123;</span><br><span class="line">UUserWidget* MyUI = UWidgetBlueprintLibrary::<span class="built_in">Create</span>(GWorld, MyUIClass, <span class="literal">nullptr</span>);<span class="comment">//创建蓝图添加到窗口</span></span><br><span class="line">MyUI-&gt;<span class="built_in">AddToViewport</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 需要包含头文件：</span></span><br><span class="line"><span class="comment">#include &quot;Blueprint/UserWidget.h&quot;</span></span><br><span class="line"><span class="comment">#include &quot;Blueprint/WidgetBlueprintLibrary.h&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 两种方法都得在当前项目的 .Build.cs 文件中检查是否有包含 &quot;UMG&quot; 模块，没有的话需要添加上去，这样才能编译通过；</span></span><br><span class="line"><span class="comment">PublicDependencyModuleNames.AddRange(new string[] &#123; &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot;, &quot;HeadMountedDisplay&quot;, &quot;UMG&quot; &#125;);</span></span><br><span class="line"><span class="comment">（看到最后一个没有~）</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><h3 id="在-C-代码中设置-GameMode"><a href="#在-C-代码中设置-GameMode" class="headerlink" title="在 C++ 代码中设置 GameMode"></a>在 C++ 代码中设置 GameMode</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TestGameGameMode 构造函数中设置对应的 GameMode 的参数,当然要先引入下面对应类的头文件</span></span><br><span class="line">ATestGameGameMode::<span class="built_in">ATestGameGameMode</span>()</span><br><span class="line">&#123;</span><br><span class="line">GameStateClass = ATestGameState::<span class="built_in">StaticClass</span>();</span><br><span class="line">PlayerControllerClass = ATestPlayerController::<span class="built_in">StaticClass</span>();</span><br><span class="line">PlayerStateClass = ATestPlayerState::<span class="built_in">StaticClass</span>();</span><br><span class="line">HUDClass = ATestHUD::<span class="built_in">StaticClass</span>();</span><br><span class="line">DefaultPawnClass = ATestPawn::<span class="built_in">StaticClass</span>();</span><br><span class="line">SpectatorClass = ATest_SpectatorPawn::<span class="built_in">StaticClass</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-类-加载-蓝图类"><a href="#C-类-加载-蓝图类" class="headerlink" title="C++类 加载 蓝图类"></a>C++类 加载 蓝图类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FString CharacterClassLoadPath = <span class="built_in">FString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Blueprint&#x27;/Game/ThirdPersonCPP/Blueprints/ThirdPersonCharacter.ThirdPersonCharacter_C&#x27;&quot;</span>));<span class="comment">// 路径</span></span><br><span class="line">DefaultPawnClass = <span class="built_in">LoadClass</span>&lt;AMyProject02Character&gt;(<span class="literal">NULL</span>, *CharacterClassLoadPath);<span class="comment">// 动态加载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要注意这个 TEXT 里面的规则... 真的是很烦...</span></span><br><span class="line"><span class="comment">// Blueprint&#x27;路径&#x27;；最后的蓝图类是 blueprintname.blueprintname_C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意字符串的拼接</span></span><br><span class="line">FString s = <span class="string">&quot;Blueprint&#x27;&quot;</span>;</span><br><span class="line">s.<span class="built_in">Append</span>(ClassPath.<span class="built_in">ToString</span>());<span class="comment">// ClassPath 是 FSoftClassPath</span></span><br><span class="line">s.<span class="built_in">Append</span>(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">UClass* BP_ProjectileClass = <span class="built_in">LoadClass</span>&lt;AProjectile&gt;(<span class="literal">NULL</span>, *s);</span><br></pre></td></tr></table></figure><h2 id="创建销毁"><a href="#创建销毁" class="headerlink" title="创建销毁"></a>创建销毁</h2><h3 id="创建组件，初始化组件，使用组件"><a href="#创建组件，初始化组件，使用组件" class="headerlink" title="创建组件，初始化组件，使用组件"></a>创建组件，初始化组件，使用组件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------- .h 文件-----------------*/</span> </span><br><span class="line">UStaticMeshComponent *VisualMesh = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------- .cpp 文件-----------------*/</span> </span><br><span class="line"><span class="comment">// 一般在构造函数里面做</span></span><br><span class="line">VisualMesh = <span class="built_in">CreateDefaultSubobject</span>&lt;UStaticMeshComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;VisualMesh&quot;</span>));<span class="comment">// 创建组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 VisualMesh 作为根组件</span></span><br><span class="line">RootComponent = <span class="built_in">Cast</span>&lt;USceneComponent&gt;(VisualMesh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将组件附在另一个组件下面</span></span><br><span class="line">Box-&gt;<span class="built_in">SetupAttachment</span>(VisualMesh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置碰撞预设</span></span><br><span class="line">VisualMesh-&gt;<span class="built_in">SetCollisionProfileName</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;BlockAllDynamic&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型(注意，ConstructorHelpers::FObjectFinder 只能在构造函数中用，否则会崩溃)</span></span><br><span class="line"><span class="function"><span class="type">static</span> ConstructorHelpers::FObjectFinder&lt;UStaticMesh&gt; <span class="title">CubeVisualAsset</span><span class="params">(TEXT(<span class="string">&quot;/Game/StarterContent/Shapes/Shape_Cube.Shape_Cube&quot;</span>))</span></span>;<span class="comment">// 注意路径格式</span></span><br><span class="line"><span class="keyword">if</span> (CubeVisualAsset.<span class="built_in">Succeeded</span>())</span><br><span class="line">&#123;</span><br><span class="line">VisualMesh-&gt;<span class="built_in">SetStaticMesh</span>(CubeVisualAsset.Object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置位置</span></span><br><span class="line">VisualMesh-&gt;<span class="built_in">SetRelativeLocation</span>(<span class="built_in">FVector</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>));</span><br></pre></td></tr></table></figure><h3 id="创建、销毁Actor"><a href="#创建、销毁Actor" class="headerlink" title="创建、销毁Actor"></a>创建、销毁Actor</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">AMyBox *mybox = <span class="built_in">GetWorld</span>()-&gt;<span class="built_in">SpawnActor</span>&lt;AMyBox&gt;(SpawnLocation, SpawnRotation);<span class="comment">// 创建</span></span><br><span class="line">mybox-&gt;<span class="built_in">destroy</span>();<span class="comment">// 销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个特效类对象，附在MyBox类对象上面（这里的this是MyBox的对象）</span></span><br><span class="line">AMyEffect *MyEffect = <span class="built_in">GetWorld</span>()-&gt;<span class="built_in">SpawnActor</span>&lt;AMyEffect&gt;();</span><br><span class="line">MyEffect-&gt;<span class="built_in">AttachToActor</span>(<span class="keyword">this</span>, FAttachmentTransformRules::KeepRelativeTransform);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟创建 Actor，用于完整的创建，放置还未初始化就被销毁的情况</span></span><br><span class="line">AProjectile* NewProjectile = <span class="built_in">Cast</span>&lt;AProjectile&gt;(UGameplayStatics::<span class="built_in">BeginDeferredActorSpawnFromClass</span>(<span class="keyword">this</span>, BP_ProjectileClass, SpawnTransform, ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn));</span><br><span class="line"><span class="keyword">if</span> (NewProjectile)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 在这里就是完成创建之前要做的事情</span></span><br><span class="line">NewProjectile-&gt;<span class="built_in">SetOwner</span>(<span class="keyword">this</span>);</span><br><span class="line">NewProjectile-&gt;<span class="built_in">Init</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">UGameplayStatics::<span class="built_in">FinishSpawningActor</span>(NewProjectile, SpawnTransform);</span><br></pre></td></tr></table></figure><h3 id="粒子效果的使用实例"><a href="#粒子效果的使用实例" class="headerlink" title="粒子效果的使用实例"></a>粒子效果的使用实例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UParticleSystem</span>* PickUpFX;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UParticleSystem</span>* StaticFX;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actor 消失，特效不消失</span></span><br><span class="line">UGameplayStatics::<span class="built_in">SpawnEmitterAtLocation</span>(<span class="keyword">this</span>, PickUpFX, <span class="built_in">GetActorLocation</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// MeshComp 是一个组件，特效附着在组件上面，Actor销毁，特效也销毁</span></span><br><span class="line">UGameplayStatics::<span class="built_in">SpawnEmitterAttached</span>(StaticFX, MeshComp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一篇将了随着Actor销毁，特效销毁/不销毁 的两种做法。</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/weixin_36728104/article/details/82893670</span></span><br></pre></td></tr></table></figure><h2 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h2><h3 id="计算两个位置的距离"><a href="#计算两个位置的距离" class="headerlink" title="计算两个位置的距离"></a>计算两个位置的距离</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FVector::<span class="built_in">Distance</span>(FVector1, Fvector2);</span><br></pre></td></tr></table></figure><h3 id="随机数的使用"><a href="#随机数的使用" class="headerlink" title="随机数的使用"></a>随机数的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/KismetMathLibrary.h&quot;</span></span></span><br><span class="line"><span class="type">float</span> RandomX = UKismetMathLibrary::<span class="built_in">RandomFloatInRange</span>(MIN_X, MAX_X);</span><br></pre></td></tr></table></figure><h3 id="时间的使用"><a href="#时间的使用" class="headerlink" title="时间的使用"></a>时间的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的游戏时间</span></span><br><span class="line"><span class="type">double</span> CurrentTime = FDateTime::<span class="built_in">Now</span>().<span class="built_in">GetTimeOfDay</span>().<span class="built_in">GetTotalMilliseconds</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出年月日</span></span><br><span class="line">FDateTime tt = FDateTime::<span class="built_in">Now</span>();</span><br><span class="line"><span class="type">int</span> year = tt.<span class="built_in">GetYear</span>();</span><br><span class="line"><span class="type">int</span> month = tt.<span class="built_in">GetMonth</span>();</span><br><span class="line"><span class="type">int</span> day = tt.<span class="built_in">GetDay</span>();</span><br><span class="line"><span class="type">int</span> hour = tt.<span class="built_in">GetHour</span>();</span><br><span class="line"><span class="type">int</span> minute = tt.<span class="built_in">GetMinute</span>();</span><br><span class="line"><span class="type">int</span> second = tt.<span class="built_in">GetSecond</span>();</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;Time : %d, %d, %d, %d, %d, %d&quot;</span>), year, month, day, hour, minute, second);</span><br></pre></td></tr></table></figure><h2 id="定时器的使用"><a href="#定时器的使用" class="headerlink" title="定时器的使用"></a>定时器的使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个定时器 Handle，用于特效对象的延迟销毁</span></span><br><span class="line">FTimerHandle TimerHandle;</span><br><span class="line"><span class="built_in">GetWorldTimerManager</span>().<span class="built_in">SetTimer</span>(TimerHandle, <span class="keyword">this</span>, &amp;AMyEffect::OnDestroyed, <span class="number">2.0f</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测定时器是否活跃</span></span><br><span class="line"><span class="built_in">GetWorldTimerManager</span>().<span class="built_in">IsTimerActive</span>(M_TimerHandle) == <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清楚定时器</span></span><br><span class="line"><span class="built_in">GetWorldTimerManager</span>().<span class="built_in">ClearTimer</span>(M_TimerHandle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个可以看一下官方文档</span></span><br><span class="line">https:<span class="comment">//docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Timers/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但其实关于定时，我们可以通过记录时间的方式来实现，这样更加简单。</span></span><br></pre></td></tr></table></figure><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="运行行为树"><a href="#运行行为树" class="headerlink" title="运行行为树"></a>运行行为树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UBehaviorTreeComponent</span>* M_BehaviorTree;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UBlackboardComponent</span>* M_Blackboard;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, Category = <span class="string">&quot;BaseConfig&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UBehaviorTree</span>* BTree = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">UBehaviorTree* <span class="title">AAICharacter_Base::GetBTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> BTree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAIController_Base::RunAIBehaviorTree</span><span class="params">(APawn* InPawn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AAICharacter_Base* AI = <span class="built_in">Cast</span>&lt;AAICharacter_Base&gt;(InPawn);</span><br><span class="line"><span class="keyword">if</span> (AI &amp;&amp; AI-&gt;<span class="built_in">GetBTree</span>())</span><br><span class="line">&#123;</span><br><span class="line">M_Blackboard-&gt;<span class="built_in">InitializeBlackboard</span>(*AI-&gt;<span class="built_in">GetBTree</span>()-&gt;BlackboardAsset);<span class="comment">// 初始化AI中的黑板，黑板是在行为树中的。</span></span><br><span class="line">M_BehaviorTree-&gt;<span class="built_in">StartTree</span>(*AI-&gt;<span class="built_in">GetBTree</span>());<span class="comment">// 开始运行行为树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用感知组件"><a href="#使用感知组件" class="headerlink" title="使用感知组件"></a>使用感知组件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Perception/AISenseConfig_Sight.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Perception/AIPerceptionComponent.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAISenseConfig_Sight</span>* SightConfig = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UAIPerceptionComponent</span>* M_AIPerception = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">AAIController::<span class="built_in">AAIController</span>()</span><br><span class="line">&#123;</span><br><span class="line">M_AIPerception = <span class="built_in">CreateDefaultSubobject</span>&lt;UAIPerceptionComponent&gt;(<span class="string">&quot;AIPerception&quot;</span>);</span><br><span class="line">SightConfig = <span class="built_in">CreateDefaultSubobject</span>&lt;UAISenseConfig_Sight&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AISightConfig&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (M_AIPerception)</span><br><span class="line">&#123;</span><br><span class="line">M_AIPerception-&gt;<span class="built_in">ConfigureSense</span>(*SightConfig);</span><br><span class="line">M_AIPerception-&gt;<span class="built_in">SetDominantSense</span>(SightConfig-&gt;<span class="built_in">GetSenseImplementation</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意绑定感知函数不能在构造函数中，否则不生效，所以放在 BeginPlay 里面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAIController::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (M_AIPerception)</span><br><span class="line">&#123;</span><br><span class="line">M_AIPerception-&gt;OnTargetPerceptionUpdated.<span class="built_in">AddDynamic</span>(<span class="keyword">this</span>, &amp;AAIController::OnTargetPerceptionUpdated);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UAIPerceptionSystem::<span class="built_in">RegisterPerceptionStimuliSource</span>(<span class="keyword">this</span>, UAISense_Sight::<span class="built_in">StaticClass</span>(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 AI 感知组件的参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AAIController_CloseCombat::InitAIPerception</span><span class="params">(APawn* InPawn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 写自己的设置参数逻辑</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意设置完需要重新配置一下，否则不生效！！！</span></span><br><span class="line">M_AIPerception-&gt;<span class="built_in">ConfigureSense</span>(*SightConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举的使用"><a href="#枚举的使用" class="headerlink" title="枚举的使用"></a>枚举的使用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UENUM</span>(BlueprintType)</span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">ECampType</span> : uint8</span><br><span class="line">&#123;</span><br><span class="line">NONE,</span><br><span class="line">RED=<span class="number">1</span><span class="built_in">UMETA</span>(DisplayName = <span class="string">&quot;Red&quot;</span>),</span><br><span class="line">BLUE=<span class="number">2</span><span class="built_in">UMETA</span>(DisplayName = <span class="string">&quot;Blue&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举转换成字符串</span></span><br><span class="line">UEnum* <span class="type">const</span> CampTypeEnum = <span class="built_in">StaticEnum</span>&lt;ECampType&gt;();</span><br><span class="line">FString s = CampTypeEnum-&gt;<span class="built_in">GetDisplayNameTextByValue</span>(<span class="built_in">static_cast</span>&lt;uint8&gt;(ECampType::RED)).<span class="built_in">ToString</span>();</span><br></pre></td></tr></table></figure><h2 id="遍历-TMap"><a href="#遍历-TMap" class="headerlink" title="遍历 TMap"></a>遍历 TMap</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TMap&lt;FString, <span class="type">int</span>&gt;::TConstIterator iter = _Map.<span class="built_in">CreateConstIterator</span>(); iter; ++iter)</span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="导入项目时，vs显示不支持？"><a href="#导入项目时，vs显示不支持？" class="headerlink" title="导入项目时，vs显示不支持？"></a>导入项目时，vs显示不支持？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：vs版本不匹配，可以去网上找找 vs 和 ue 版本的匹配程度；我是：</span><br><span class="line">ue 4.24 &lt;=&gt; vs 2017</span><br><span class="line">ue 4.27 &lt;=&gt; vs 2022</span><br></pre></td></tr></table></figure><h2 id="换了之后-vs-编译时显示-sdk-有问题？"><a href="#换了之后-vs-编译时显示-sdk-有问题？" class="headerlink" title="换了之后 vs 编译时显示 sdk 有问题？"></a>换了之后 vs 编译时显示 sdk 有问题？</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这个搞了好久...盲猜删<span class="number">2017</span>的时候给删掉了...</span><br><span class="line"></span><br><span class="line">报错信息：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Could not find NetFxSDK install dir; this will prevent SwarmInterface from installing.  Install a version of .NET Framework SDK at 4.6.0 or higher.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">参考这篇文章：</span><br><span class="line">https:<span class="comment">//zhuanlan.zhihu.com/p/133456753</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/UE4/">UE4</category>
      
      
      <category domain="http://example.com/tags/UE4/">UE4</category>
      
      
      <comments>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E5%B0%8F%E7%9F%A5%E8%AF%86%E3%80%81%E9%97%AE%E9%A2%98%20%E6%B1%87%E6%80%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【UE4】资源加载</title>
      <link>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</link>
      <guid>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/</guid>
      <pubDate>Tue, 24 Oct 2023 13:32:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;此篇文章记录的是 UE4 的资源加载&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ww</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>此篇文章记录的是 UE4 的资源加载</strong></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/sin998/p/15229639.html">【总览】博客导航 - 多思考多实践同等重要 - 博客园 (cnblogs.com)</a></p><p>ps：资源加载 篇</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/UE4/">UE4</category>
      
      
      <category domain="http://example.com/tags/UE4/">UE4</category>
      
      
      <comments>http://example.com/2023/10/24/%E3%80%90UE4%E3%80%91%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>工作记录</title>
      <link>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 17 Oct 2023 13:33:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;记录一下工作 以及 遇到的不会的东西&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;UE-困难记录&quot;&gt;&lt;a href=&quot;#UE-困难记录&quot; class=&quot;headerlink&quot; title=&quot;UE 困难记录&quot;&gt;&lt;/a&gt;UE 困难记录&lt;/h2&gt;&lt;p&gt;&lt;strong</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>记录一下工作 以及 遇到的不会的东西</strong></p><h2 id="UE-困难记录"><a href="#UE-困难记录" class="headerlink" title="UE 困难记录"></a>UE 困难记录</h2><p><strong>先放大招</strong>：</p><p><a href="https://blog.csdn.net/HeElLose/article/details/130712417">UE蓝图基础_@大宁字的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/HeElLose/article/details/130730431?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E4%B8%AD%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%93%9D%E5%9B%BE%E7%B1%BB%EF%BC%9F&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-130730431.142%5Ev96%5Econtrol&spm=1018.2226.3001.4187">UE蓝图进阶_@大宁字的博客-CSDN博客</a></p><p><a href="https://dev.epicgames.com/community/learning/paths/p0z/unreal-engine-03de02">新手指南 | Epic Developer Community (epicgames.com)</a></p><p><a href="https://www.zhihu.com/people/fjz13">(12 封私信 &#x2F; 85 条消息) 大钊 - 知乎 (zhihu.com)</a></p><p><strong>下面是一些小知识点</strong>：</p><p>[如何将unreal engine 4 从中文版设置为英文版_百度知道 (baidu.com)](<a href="https://zhidao.baidu.com/question/1574910021930854660.html#:~:text=%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E7%99%BB%E9%99%86%E7%9A%84%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%9C%A8Unreal">https://zhidao.baidu.com/question/1574910021930854660.html#:~:text=退出当前登陆的账号，在Unreal</a> Engine 4 最新版，打开 Epic,Games Launcher 登陆，在这个登陆面板的右上角有个下拉菜单（圆圈）点进去，里面可以选择语言，只要选中 English 再登陆，进去以后的整个界面就全是英文了。 7)</p><p>[UE4蓝图基础——蓝图实现物体移动和物体旋转_ue4蓝图控制物体移动_liang_704959721的博客-CSDN博客](<a href="https://blog.csdn.net/liang_704959721/article/details/114156075?ops_request_misc=%7B%22request_id%22:%22169755190716800186552911%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=169755190716800186552911&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-114156075-null-null.142%5Ev96%5Econtrol&utm_term=UE4">https://blog.csdn.net/liang_704959721/article/details/114156075?ops_request_misc=%7B%22request%5Fid%22%3A%22169755190716800186552911%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=169755190716800186552911&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-114156075-null-null.142^v96^control&amp;utm_term=UE4</a> 蓝图如何让物体旋转？&amp;spm&#x3D;1018.2226.3001.4187)</p><hr><h2 id="2023-10-17"><a href="#2023-10-17" class="headerlink" title="2023.10.17"></a>2023.10.17</h2><p>今天入职了，做的是UE4开发；（ps：办公环境不错）</p><p>今天的任务是用蓝图写个小功能…没接触过蓝图，今天懵逼了一天；</p><p>赶紧回来补补。</p><hr><h2 id="2023-10-18"><a href="#2023-10-18" class="headerlink" title="2023.10.18"></a>2023.10.18</h2><p><strong>关键词：</strong> <strong>模块化，解耦</strong></p><p>入职第二天，今天感觉搞了好多东西…</p><p>首先把昨天晚上做的给搬了一下；然后主要就是蓝图之间的通信…</p><p>主要有四个：宝箱蓝图类，角色蓝图类，UI蓝图，关卡蓝图；</p><p>为了更加的解耦，我都尽量写在了各自的蓝图类中，尽量不写在关卡蓝图中；</p><p>但是因为不太熟悉蓝图，所以蓝图通信的时候还是有些搞在一起… 确实有点麻烦… </p><p>实现的主要功能就是UI能够正常的显示宝箱的数量，以及宝箱数量为0时，随机刷出宝箱；（里面的细节还是不少的，感觉…）</p><p>蓝图之间的通信，我用了 函数、事件、事件分发器；</p><ul><li>函数、事件<ul><li>其实函数和事件可以看成是一类东西，无非就是被调用方把一些功能封装一下，然后调用方在某个时刻去调用这个函数或者事件（当然在调用的时候需要获取到被调用方的实例 &#x2F; 控制，可以通过类型转换或者全局查找actor的方式，这样才能去调用它的函数&#x2F;事件）</li></ul></li><li>事件分发器<ul><li>这个其实是一种常用的方法了，比较重要；思想比较简单，但是在蓝图中感觉比较奇怪…</li><li>它是一种 <strong>发布者 &#x2F; 订阅者</strong> 模式，当发布者往事件分发器里面call的时候，绑定在这个事件分发器上的订阅者都能收到消息，从而执行对应的逻辑；也就是说发布者并不知道具体会做啥，只需要 call 就行，订阅者需要去关注；</li><li>具体做法就是：<strong>发布者</strong>创建一个<strong>事件分发器（event dispatchers）</strong>，然后对于<strong>订阅者</strong>，需要自行<strong>订阅这个事件分发器</strong>（称为bind）（同样也需要获取到发布者的蓝图类，从而获取到这个分发器），同时实现一下订阅者收到 call 的时候需要执行的事件就行。然后在发布者的蓝图逻辑中，在需要时 call 一下这个事件分发器就行了。</li></ul></li></ul><p>那么这里会遇到一个问题，我在关卡蓝图中定义了一个事件分发器，然后需要在UI中bind这个分发器，如何才能找到这个关卡蓝图呢？（这个不太会…）</p><p>同时，今天还有一个东西没学，就是 GamePlay 框架，现在学一下…</p><p>今天就是这两个东西没搞，明天开始写c++了…</p><p>两天速成蓝图时间太紧了…有时间的话还是需要系统深入的学一下蓝图…</p><hr><h2 id="2023-10-20"><a href="#2023-10-20" class="headerlink" title="2023.10.20"></a>2023.10.20</h2><p><strong>关键词：UE C++</strong></p><p>这几天很抑郁，其他小伙伴都收到了中大厂的offer，不少从游戏转到互连网的，都劝我放弃游戏…</p><p>我也开始怀疑我选择的这条道路的真确性了，真的有点崩溃… 不过还是坚持自己的内心吧，<strong>坚定 坚持 坚强</strong>。</p><p>19，20 号这两天开始做另一个实习项目了，任务是用 UE C++ 实现实习项目1（之前是纯蓝图写的）</p><p>好像还没说过实习项目是啥… </p><p>具体就是实现一个功能，以第三人称游戏模式创建项目，地图上会随机刷出宝箱，角色移动碰撞到宝箱后会拾取宝箱，同时宝箱销毁，播一个特效，当地图上的宝箱被捡完之后又会刷新宝箱，同时还要显示剩余宝箱数量和已检宝箱数量。（就是这么简单我还做了这么久…）（听说后面还有很多个实习项目，不过刚好也能快速成长了）</p><p>今天是21号，搞完了这个实习项目。感觉东西还是很多很多的，越做越发现这东西水很深，需要静下心来学习一段时间。</p><p>虽然遇到的只是一个小问题，但是解决的问题的方式有很多… 会牵扯出一大块知识，包括架构的理解等等；</p><p>主要是下面几类大问题：（等我全部总结完之后，会把每个模块都写一下博客）</p><ol><li><strong>类之间的相互调用</strong><ul><li>c++类 和 蓝图类</li><li>蓝图类之间</li><li>c++ 类之间（包括 GameMode，GameState，GamePlayer 等）</li></ul></li><li><strong>碰撞检测</strong><ul><li>Hit</li><li>Overlap</li></ul></li><li><strong>事件分发器（委托 &#x2F; 代理）</strong></li><li><strong>宏定义</strong></li><li><strong>对 UE GamePlay 架构的理解，UE 程序启动的流程（函数执行的顺序）</strong></li></ol><p>所以后面的博客，我打算这个搞，首先有一篇杂的UE小知识（记录一下一写获取方法等的小知识），然后对于每个模块总结后发一篇，便于以后的查找和翻阅。希望以后也能够称为 UE 大佬。</p><h2 id="2023-10-24"><a href="#2023-10-24" class="headerlink" title="2023.10.24"></a>2023.10.24</h2><p>学习方法有点问题…</p><p>别急别急别急，沉下心来学习。</p><h2 id="2023-11-1"><a href="#2023-11-1" class="headerlink" title="2023.11.1"></a>2023.11.1</h2><p>好久没写了… 好懒…</p><p>昨天 leader 推荐了 games 104，最近刚好感觉需要一个系统性的引擎课程来巩固一下。</p><p>所以打算先学一下 games 104，然后再学一下 games 101；</p><p>（希望能够坚持写一下学习笔记…）</p><p>或者自己做一个 demo，不过通过实习项目也接触到了很多东西，上一个是动画，这一个是做一个 多人联机…</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B7%A5%E4%BD%9C/">工作</category>
      
      
      <category domain="http://example.com/tags/%E5%B7%A5%E4%BD%9C/">工作</category>
      
      
      <comments>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <guid>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Sat, 14 Oct 2023 07:28:54 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;这篇文章记录一下-Blog-的一些使用指南：&quot;&gt;&lt;a href=&quot;#这篇文章记录一下-Blog-的一些使用指南：&quot; class=&quot;headerlink&quot; title=&quot;这篇文章记录一下 Blog 的一些使用指南：&quot;&gt;&lt;/a&gt;这篇文章记录一下 Blog 的一些使用指</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="这篇文章记录一下-Blog-的一些使用指南："><a href="#这篇文章记录一下-Blog-的一些使用指南：" class="headerlink" title="这篇文章记录一下 Blog 的一些使用指南："></a>这篇文章记录一下 Blog 的一些使用指南：</h1><p>source&#x2F;_posts：里面放的就是文章，要写文章就加一篇上去；</p><p>文章的分类和标签在上面加上去就行；</p><hr><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><p>全部改完之后，在 Blog 文件夹打开 git bash，执行下面命令：<br><strong>hexo clean</strong><br><strong>hexo g</strong><br><strong>hexo d</strong></p><p><strong>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</strong></p><hr><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>首先在 _config.yml 配置文件里面的这个：<br>post_asset_folder: false<br>这个一定要为 false，之前不小心设置为 true 了，然后就一直插入失败…</p><p><strong>语法</strong>：<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1.png"></p><ol><li><p><strong>md 语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](/images/使用指南/1.png)</span><br><span class="line"></span><br><span class="line">![](images/使用指南/1.png)</span><br></pre></td></tr></table></figure></li><li><p><strong>html 语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/images/使用指南/1.png&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol><p>images 文件夹是在 source 下面自己创建的！</p><p>路径名好像不能有空格。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">使用指南</category>
      
      
      
      <comments>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
