<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>FJBQ</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择大于努力</description>
    <pubDate>Wed, 18 Oct 2023 14:27:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>工作记录</title>
      <link>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 17 Oct 2023 13:33:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;记录一下工作 以及 遇到的不会的东西&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;UE-困难记录&quot;&gt;&lt;a href=&quot;#UE-困难记录&quot; class=&quot;headerlink&quot; title=&quot;UE 困难记录&quot;&gt;&lt;/a&gt;UE 困难记录&lt;/h2&gt;&lt;p&gt;&lt;strong</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>记录一下工作 以及 遇到的不会的东西</strong></p><h2 id="UE-困难记录"><a href="#UE-困难记录" class="headerlink" title="UE 困难记录"></a>UE 困难记录</h2><p><strong>先放大招</strong>：</p><p><a href="https://blog.csdn.net/HeElLose/article/details/130712417">UE蓝图基础_@大宁字的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/HeElLose/article/details/130730431?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%A6%82%E4%BD%95%E5%9C%A8%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E4%B8%AD%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%93%9D%E5%9B%BE%E7%B1%BB%EF%BC%9F&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-130730431.142%5Ev96%5Econtrol&spm=1018.2226.3001.4187">UE蓝图进阶_@大宁字的博客-CSDN博客</a></p><p><strong>下面是一些小知识点</strong>：</p><p>[如何将unreal engine 4 从中文版设置为英文版_百度知道 (baidu.com)](<a href="https://zhidao.baidu.com/question/1574910021930854660.html#:~:text=%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E7%99%BB%E9%99%86%E7%9A%84%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%9C%A8Unreal">https://zhidao.baidu.com/question/1574910021930854660.html#:~:text=退出当前登陆的账号，在Unreal</a> Engine 4 最新版，打开 Epic,Games Launcher 登陆，在这个登陆面板的右上角有个下拉菜单（圆圈）点进去，里面可以选择语言，只要选中 English 再登陆，进去以后的整个界面就全是英文了。 7)</p><p>[UE4蓝图基础——蓝图实现物体移动和物体旋转_ue4蓝图控制物体移动_liang_704959721的博客-CSDN博客](<a href="https://blog.csdn.net/liang_704959721/article/details/114156075?ops_request_misc=%7B%22request_id%22:%22169755190716800186552911%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=169755190716800186552911&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-114156075-null-null.142%5Ev96%5Econtrol&utm_term=UE4">https://blog.csdn.net/liang_704959721/article/details/114156075?ops_request_misc=%7B%22request%5Fid%22%3A%22169755190716800186552911%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=169755190716800186552911&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-114156075-null-null.142^v96^control&amp;utm_term=UE4</a> 蓝图如何让物体旋转？&amp;spm&#x3D;1018.2226.3001.4187)</p><hr><h2 id="2023-10-17"><a href="#2023-10-17" class="headerlink" title="2023.10.17"></a>2023.10.17</h2><p>今天入职了，做的是UE4开发；（ps：办公环境不错）</p><p>今天的任务是用蓝图写个小功能…没接触过蓝图，今天懵逼了一天；</p><p>赶紧回来补补。</p><hr><h2 id="2023-10-18"><a href="#2023-10-18" class="headerlink" title="2023.10.18"></a>2023.10.18</h2><p><strong>关键词：</strong> <strong>模块化，解耦</strong></p><p>入职第二天，今天感觉搞了好多东西…</p><p>首先把昨天晚上做的给搬了一下；然后主要就是蓝图之间的通信…</p><p>主要有四个：宝箱蓝图类，角色蓝图类，UI蓝图，关卡蓝图；</p><p>为了更加的解耦，我都尽量写在了各自的蓝图类中，尽量不写在关卡蓝图中；</p><p>但是因为不太熟悉蓝图，所以蓝图通信的时候还是有些搞在一起… 确实有点麻烦… </p><p>实现的主要功能就是UI能够正常的显示宝箱的数量，以及宝箱数量为0时，随机刷出宝箱；（里面的细节还是不少的，感觉…）</p><p>蓝图之间的通信，我用了 函数、事件、事件分发器；</p><ul><li>函数、事件<ul><li>其实函数和事件可以看成是一类东西，无非就是被调用方把一些功能封装一下，然后调用方在某个时刻去调用这个函数或者事件（当然在调用的时候需要获取到被调用方的实例 &#x2F; 控制，可以通过类型转换或者全局查找actor的方式，这样才能去调用它的函数&#x2F;事件）</li></ul></li><li>事件分发器<ul><li>这个其实是一种常用的方法了，比较重要；思想比较简单，但是在蓝图中感觉比较奇怪…</li><li>它是一种 <strong>发布者 &#x2F; 订阅者</strong> 模式，当发布者往事件分发器里面call的时候，绑定在这个事件分发器上的订阅者都能收到消息，从而执行对应的逻辑；也就是说发布者并不知道具体会做啥，只需要 call 就行，订阅者需要去关注；</li><li>具体做法就是：<strong>发布者</strong>创建一个<strong>事件分发器（event dispatchers）</strong>，然后对于<strong>订阅者</strong>，需要自行<strong>订阅这个事件分发器</strong>（称为bind）（同样也需要获取到发布者的蓝图类，从而获取到这个分发器），同时实现一下订阅者收到 call 的时候需要执行的事件就行。然后在发布者的蓝图逻辑中，在需要时 call 一下这个事件分发器就行了。</li></ul></li></ul><p>那么这里会遇到一个问题，我在关卡蓝图中定义了一个事件分发器，然后需要在UI中bind这个分发器，如何才能找到这个关卡蓝图呢？（这个不太会…）</p><p>同时，今天还有一个东西没学，就是 GamePlay 框架，现在学一下…</p><p>今天就是这两个东西没搞，明天开始写c++了…</p><p>两天速成蓝图时间太紧了…有时间的话还是需要系统深入的学一下蓝图…</p><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B7%A5%E4%BD%9C/">工作</category>
      
      
      <category domain="http://example.com/tags/%E5%B7%A5%E4%BD%9C/">工作</category>
      
      
      <comments>http://example.com/2023/10/17/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>UE 学习笔记</title>
      <link>http://example.com/2023/10/16/UE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>http://example.com/2023/10/16/UE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 16 Oct 2023 00:27:53 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;此篇文章记录一下 UE C++ 的学习过程&lt;/strong&gt;&lt;br&gt;学习资源是b站：&lt;strong&gt;BV1Ce4y1e7PE&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;P17-UE-C-中类的继</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p><strong>此篇文章记录一下 UE C++ 的学习过程</strong><br>学习资源是b站：<strong>BV1Ce4y1e7PE</strong></p></blockquote><hr><h1 id="P17-UE-C-中类的继承结构"><a href="#P17-UE-C-中类的继承结构" class="headerlink" title="P17 UE C++ 中类的继承结构"></a>P17 UE C++ 中类的继承结构</h1><p>![[Pasted image 20231016085131.png]]</p><p>![[Pasted image 20231016092237.png]]</p><p>![[Pasted image 20231016092305.png]]</p><p>![[Pasted image 20231016092336.png]]</p><hr><h1 id="P18-使用-UE-的反射和垃圾回收系统"><a href="#P18-使用-UE-的反射和垃圾回收系统" class="headerlink" title="P18 使用 UE 的反射和垃圾回收系统"></a>P18 使用 UE 的反射和垃圾回收系统</h1><p>![[Pasted image 20231016101641.png]]</p><p>UClASS()：对类的宏定义<br>UPROPERTY()：对变量的宏定义<br>UFUNCTION()：对函数的宏定义</p><hr><h1 id="P19-使用-UE-的反射和垃圾回收系统"><a href="#P19-使用-UE-的反射和垃圾回收系统" class="headerlink" title="P19 使用 UE 的反射和垃圾回收系统"></a>P19 使用 UE 的反射和垃圾回收系统</h1><p><a href="https://blog.csdn.net/zhang1461376499/article/details/113337105?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169745357516800192220133%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169745357516800192220133&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-113337105-null-null.142%5Ev96%5Econtrol&utm_term=UE%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%95%A5%E6%84%8F%E6%80%9D%EF%BC%9F&spm=1018.2226.3001.4187">虚幻引擎(UE4) 反射系统(Reflection)_虚幻反射-CSDN博客</a></p><hr><h1 id="P21-创建-UObject-的蓝图类与基础宏参数"><a href="#P21-创建-UObject-的蓝图类与基础宏参数" class="headerlink" title="P21 创建 UObject 的蓝图类与基础宏参数"></a>P21 创建 UObject 的蓝图类与基础宏参数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/NoExportTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyObject.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">宏括号里面填的东西一般是没有智能提示的；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable)<span class="comment">// 表示这个类允许生成蓝图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYPROJECT01_API</span> UMyObject : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UMyObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite)<span class="comment">// 表示这个变量在蓝图系统中能被读写</span></span><br><span class="line"><span class="type">float</span> MyFloat;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)<span class="comment">// 表示这个函数在蓝图系统中能被调用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFuntion</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyObject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UMyObject::<span class="built_in">UMyObject</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyObject::MyFuntion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：</p><p>![[Pasted image 20231016203408.png]]</p><hr><h1 id="P22-使用-UE-LOG-打印日志，在蓝图中实例化继承于-Object-的类"><a href="#P22-使用-UE-LOG-打印日志，在蓝图中实例化继承于-Object-的类" class="headerlink" title="P22 使用 UE_LOG 打印日志，在蓝图中实例化继承于 Object 的类"></a>P22 使用 UE_LOG 打印日志，在蓝图中实例化继承于 Object 的类</h1><p><strong>关卡蓝图</strong>：每个关卡特有的，且每个关卡只有一张（关卡中一些特殊的操作可能会用到）；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UObject/NoExportTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyObject.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">宏括号里面填的东西一般是没有智能提示的；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Blueprintable)<span class="comment">// 表示这个类允许生成蓝图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYPROJECT01_API</span> UMyObject : <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UMyObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示这个变量在蓝图系统中能被读写, category 表示分类</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(BlueprintReadWrite, category = <span class="string">&quot;My Variables&quot;</span>)</span><br><span class="line"><span class="type">float</span> MyFloat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示这个函数在蓝图系统中能被调用, category 表示分类</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, category = <span class="string">&quot;My Functions&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFuntion</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyObject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UMyObject::<span class="built_in">UMyObject</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyObject::MyFuntion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UE_LOG() : 打印日志；</span></span><br><span class="line"><span class="comment">第一个参数：输出的类型（可以用于限制输出和过滤）</span></span><br><span class="line"><span class="comment">第二个参数：输出的级别（日志，警告，错误）</span></span><br><span class="line"><span class="comment">第三个参数：打印的内容（需要用一个文本宏）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello World&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello World&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello World&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![[Pasted image 20231016213117.png]]</p><p>![[Pasted image 20231016213137.png]]</p><h1 id="P23-删除c-的类"><a href="#P23-删除c-的类" class="headerlink" title="P23 删除c++的类"></a>P23 删除c++的类</h1><p>太麻烦了…看视频</p><h1 id="创建自己的Actor子类-和-学习命名规范"><a href="#创建自己的Actor子类-和-学习命名规范" class="headerlink" title="创建自己的Actor子类 和 学习命名规范"></a>创建自己的Actor子类 和 学习命名规范</h1><p><strong>UE 中的命名规范</strong>：<br>![[Pasted image 20231016214447.png]]</p><p>c++类 可以派生出 蓝图类；</p><p>也就是说 蓝图类 一般会比 c++ 类 多一些东西（组件）；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYPROJECT01_API</span> AMyActor : <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this actor&#x27;s properties</span></span><br><span class="line"><span class="built_in">AMyActor</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="comment">// 当 Actor 生成一个实例 Pawn 的时候会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="comment">// 每一帧调用一次，DeltaTime 是两帧的时间间隔</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AMyActor::<span class="built_in">AMyActor</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="P25-组件、使用蓝图类扩展代码的优点"><a href="#P25-组件、使用蓝图类扩展代码的优点" class="headerlink" title="P25 组件、使用蓝图类扩展代码的优点"></a>P25 组件、使用蓝图类扩展代码的优点</h1><p><strong>组件 是继承与 UObject 的一个特殊的类</strong>；给能够显示在场景中的对象赋予一些属性；</p><p>![[Pasted image 20231016220624.png]]</p><p>一定有一个 <strong>根组件</strong>；</p><p>使用<strong>蓝图类</strong>的好处：</p><ul><li>说到底就是 <strong>类</strong> 和 <strong>对象</strong> 的关系（比如，我们用蓝图类在场景中创建了很多的对象，这时我们可以在蓝图类中修改属性，此时所有对象的属性都会被修改，类似于预制体；注意的是，如果对象自己改变的某些属性，则这些属性并不会被修改，也可以自定义）</li></ul><h1 id="P26-在-c-中创建静态网格组件"><a href="#P26-在-c-中创建静态网格组件" class="headerlink" title="P26 在 c++ 中创建静态网格组件"></a>P26 在 c++ 中创建静态网格组件</h1><p>有点意思了！</p><p>本节内容是用 uec++ 在 Actor 中添加一个组件；</p><ul><li><p>MyActor.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MYPROJECT01_API</span> AMyActor : <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Sets default values for this actor&#x27;s properties</span></span><br><span class="line"><span class="built_in">AMyActor</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反射来做一些限制（当前组件在哪都可见，分类）</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(VisibleAnywhere, Category = <span class="string">&quot;My Actor Components&quot;</span>)</span><br><span class="line">UStaticMeshComponent *MyStaticMesh;<span class="comment">// 声明一个静态网格组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="comment">// 当 Actor 生成一个实例 Pawn 的时候会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="comment">// 每一帧调用一次，DeltaTime 是两帧的时间间隔</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>MyActor.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AMyActor::<span class="built_in">AMyActor</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个静态网格（指针）</span></span><br><span class="line"><span class="comment">服了，这里的语法被 UE 封装过了... 好麻烦...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先，我们注意到：组件 是 Actor 的子物体，所以我们先用 CreateDefaultSubobject&lt;&gt;() 生成一个默认的子物体；</span></span><br><span class="line"><span class="comment">可以看到 CreateDefaultSubobject&lt;&gt;()，这个东西其实就是一个模板函数，UE封装了一下，返回一个对象；</span></span><br><span class="line"><span class="comment">参数是一个 FString（UE封装好后的一个字符串），这里我们可以通过 TEXT 来创建一个 FString；</span></span><br><span class="line"><span class="comment">其次，这个参数是当前这个组件在 UE 系统中的唯一标识（不能重复），并不是它的名字；</span></span><br><span class="line"><span class="comment">但是为了方便且调试的时候不会混淆，一般这个标识和我这个指针名字一样</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">MyStaticMesh = <span class="built_in">CreateDefaultSubobject</span>&lt;UStaticMeshComponent&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;MyStaticMesh&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called every frame</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%AD%A6%E4%B9%A0/">学习</category>
      
      <category domain="http://example.com/categories/%E5%AD%A6%E4%B9%A0/UE/">UE</category>
      
      
      <category domain="http://example.com/tags/UE/">UE</category>
      
      
      <comments>http://example.com/2023/10/16/UE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <guid>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Sat, 14 Oct 2023 07:28:54 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;这篇文章记录一下-Blog-的一些使用指南：&quot;&gt;&lt;a href=&quot;#这篇文章记录一下-Blog-的一些使用指南：&quot; class=&quot;headerlink&quot; title=&quot;这篇文章记录一下 Blog 的一些使用指南：&quot;&gt;&lt;/a&gt;这篇文章记录一下 Blog 的一些使用指</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="这篇文章记录一下-Blog-的一些使用指南："><a href="#这篇文章记录一下-Blog-的一些使用指南：" class="headerlink" title="这篇文章记录一下 Blog 的一些使用指南："></a>这篇文章记录一下 Blog 的一些使用指南：</h1><p>source&#x2F;_posts：里面放的就是文章，要写文章就加一篇上去；</p><p>文章的分类和标签在上面加上去就行；</p><hr><p>全部改完之后，在 Blog 文件夹打开 git bash，执行下面命令：<br><strong>hexo clean</strong><br><strong>hexo g</strong><br><strong>hexo d</strong></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">使用指南</category>
      
      
      
      <comments>http://example.com/2023/10/14/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
